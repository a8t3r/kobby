@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error

@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeInput(
  public val `is`: String,
  public val it: String,
  public val `in`: String? = null,
)

public fun EscapeInput.toBuilder(): EscapeInputBuilder = EscapeInputBuilder().also {
  it.`is` = this.`is`
  it.it = this.it
  it.`in` = this.`in`
}

public fun EscapeInputBuilder.toInput(): EscapeInput = EscapeInput(
  `is` ?: error("EscapeInput: 'is' must not be null"),
  it ?: error("EscapeInput: 'it' must not be null"),
  `in`
)

public fun EscapeInput(block: EscapeInputBuilder.() -> Unit): EscapeInput =
    EscapeInputBuilder().apply(block).toInput()

public fun EscapeInput.copy(block: EscapeInputBuilder.() -> Unit): EscapeInput =
    toBuilder().apply(block).toInput()

@EscapeDSL
public class EscapeInputBuilder {
  public var `is`: String? = null

  public var it: String? = null

  public var `in`: String? = null
}
