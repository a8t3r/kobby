@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.dto1

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import my.root.ctx.PrefCtxDSLPostCtx

@JsonTypeName(value = "Film")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = DPrefFilmDPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class DPrefFilmDPost(
  override val id: Long? = null,
  override val fields: String? = null,
  public val title: String? = null,
  public val genre: EPrefGenreEPost? = null,
  public val countryId: Long? = null,
  public val country: DPrefCountryDPost? = null,
  public val actors: List<DPrefActorDPost>? = null,
) : DPrefEntityDPost,
    DPrefNativeDPost {
  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as DPrefFilmDPost
    return this.id == other.id
  }

  override fun hashCode(): Int = this.id?.hashCode() ?: 0
}

public fun DPrefFilmDPost.myBuilder1(): BPrefDPrefFilmDPostBPost = BPrefDPrefFilmDPostBPost().also {
  it.id = this.id
  it.fields = this.fields
  it.title = this.title
  it.genre = this.genre
  it.countryId = this.countryId
  it.country = this.country
  it.actors = this.actors
}

public fun BPrefDPrefFilmDPostBPost.myDto2(): DPrefFilmDPost = DPrefFilmDPost(
  id,
  fields,
  title,
  genre,
  countryId,
  country,
  actors
)

public fun DPrefFilmDPost(block: BPrefDPrefFilmDPostBPost.() -> Unit): DPrefFilmDPost =
    BPrefDPrefFilmDPostBPost().apply(block).myDto2()

public fun DPrefFilmDPost.replicate(block: BPrefDPrefFilmDPostBPost.() -> Unit): DPrefFilmDPost =
    myBuilder1().apply(block).myDto2()

@PrefCtxDSLPostCtx
public class BPrefDPrefFilmDPostBPost {
  public var id: Long? = null

  public var fields: String? = null

  public var title: String? = null

  public var genre: EPrefGenreEPost? = null

  public var countryId: Long? = null

  public var country: DPrefCountryDPost? = null

  public var actors: List<DPrefActorDPost>? = null
}
