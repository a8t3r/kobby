@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.mutable_cinema_jackson.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonSubTypes
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map

/**
 * Entity with tags.
 * Introduced for testing complex inheritance.
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = FilmDto::class, name = "Film"),
  JsonSubTypes.Type(value = ActorDto::class, name = "Actor"),
)
public interface TaggableDto : EntityDto {
  /**
   * Unique identifier of entity %
   */
  public override val id: Long?

  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  public override val fields: Map<String, Any?>?

  /**
   * Tags of entity
   */
  public val tags: List<TagDto>?
}
