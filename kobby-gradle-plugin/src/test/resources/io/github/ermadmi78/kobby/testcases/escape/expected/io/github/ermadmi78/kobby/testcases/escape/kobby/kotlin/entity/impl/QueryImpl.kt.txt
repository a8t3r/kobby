@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.Escape
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.EscapeProjection
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.QueryEscapesSelectionQuery
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.QueryEscapesSelectionSelection
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.SeveralPrimaryKeys
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.SeveralPrimaryKeysProjection
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class QueryImpl(
  internal val __innerContext: EscapeContext,
  internal val __innerProjection: QueryProjectionImpl,
  internal val __innerDto: QueryDto,
) : Query {
  override val escapes: List<Escape> by lazy {
    if (__innerProjection.__innerEscapes0 == null) {
      error("Property [escapes] is not available - add [escapes] projection to switch on it")
    }
    __innerDto.resolveEscapes(__innerContext, __innerProjection.__innerEscapes0!!)
  }

  override val escapesSelection: List<Escape> by lazy {
    if (__innerProjection.__innerEscapesSelection1 == null) {
      error("Property [escapesSelection] is not available - add [escapesSelection] projection to switch on it")
    }
    __innerDto.resolveEscapesSelection(__innerContext, __innerProjection.__innerEscapesSelection1!!)
  }

  override val severalPrimaryKeys: SeveralPrimaryKeys? by lazy {
    if (__innerProjection.__innerSeveralPrimaryKeys2 == null) {
      error("Property [severalPrimaryKeys] is not available - add [severalPrimaryKeys] projection to switch on it")
    }
    __innerDto.resolveSeveralPrimaryKeys(__innerContext, __innerProjection.__innerSeveralPrimaryKeys2!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Query").append('(')

    var counter = 0

    if (__innerProjection.__innerEscapes0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("escapes").append('=').append(escapes)
    }

    if (__innerProjection.__innerEscapesSelection1 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("escapesSelection").append('=').append(escapesSelection)
    }

    if (__innerProjection.__innerSeveralPrimaryKeys2 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("severalPrimaryKeys").append('=').append(severalPrimaryKeys)
    }

    append(')')
  }

  override fun __context(): EscapeContext = __innerContext

  override fun QueryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class QueryProjectionImpl : QueryProjection {
  internal var __innerEscapes0: EscapeProjectionImpl? = null

  internal var __innerEscapes0Do: Int? = null

  internal var __innerEscapes0By: Int? = null

  internal var __innerEscapesSelection1: QueryEscapesSelectionQueryImpl? = null

  internal var __innerSeveralPrimaryKeys2: SeveralPrimaryKeysProjectionImpl? = null

  override fun escapes(
    `do`: Int?,
    `by`: Int?,
    __projection: EscapeProjection.() -> Unit,
  ) {
    __innerEscapes0 = EscapeProjectionImpl().apply(__projection)
    __innerEscapes0Do = `do`
    __innerEscapes0By = `by`
  }

  override fun escapesSelection(__query: QueryEscapesSelectionQuery.() -> Unit) {
    __innerEscapesSelection1 = QueryEscapesSelectionQueryImpl().apply(__query)
  }

  override fun severalPrimaryKeys(__projection: SeveralPrimaryKeysProjection.() -> Unit) {
    __innerSeveralPrimaryKeys2 = SeveralPrimaryKeysProjectionImpl().apply(__projection)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: QueryProjection) {
    if ("escapes" !in ignore && __innerEscapes0 != null) {
      __projection.escapes(__innerEscapes0Do, __innerEscapes0By) {
        this@QueryProjectionImpl.__innerEscapes0!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("escapesSelection" !in ignore && __innerEscapesSelection1 != null) {
      __projection.escapesSelection {
        this@QueryProjectionImpl.__innerEscapesSelection1!!.___innerRepeatProjection(setOf(), this)
        this@QueryProjectionImpl.__innerEscapesSelection1!!.___innerRepeatSelection(this)
      }
    }
    if ("severalPrimaryKeys" !in ignore && __innerSeveralPrimaryKeys2 != null) {
      __projection.severalPrimaryKeys {
        this@QueryProjectionImpl.__innerSeveralPrimaryKeys2!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: escapes
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildEscapes0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("escapes" !in ignore && __innerEscapes0 != null) {
      body.append(' ').append("escapes")
      var counter = 0
      val addBrackets = __innerEscapes0Do != null || __innerEscapes0By != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: escapes.do
      if (__innerEscapes0Do != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerEscapes0Do!!
        body.append("do").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: escapes.by
      if (__innerEscapes0By != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerEscapes0By!!
        body.append("by").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Escape
      __innerEscapes0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: escapesSelection
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildEscapesSelection1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("escapesSelection" !in ignore && __innerEscapesSelection1 != null) {
      body.append(' ').append("escapesSelection")
      var counter = 0
      val addBrackets = __innerEscapesSelection1!!.`do` != null ||
          __innerEscapesSelection1!!.`by` != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: escapesSelection.do
      if (__innerEscapesSelection1!!.`do` != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerEscapesSelection1!!.`do`!!
        body.append("do").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: escapesSelection.by
      if (__innerEscapesSelection1!!.`by` != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerEscapesSelection1!!.`by`!!
        body.append("by").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Escape
      __innerEscapesSelection1!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: escapes
    ____innerBuildEscapes0(ignore, header, body, arguments)

    // Field: escapesSelection
    ____innerBuildEscapesSelection1(ignore, header, body, arguments)

    // Field: severalPrimaryKeys
    if ("severalPrimaryKeys" !in ignore && __innerSeveralPrimaryKeys2 != null) {
      body.append(' ').append("severalPrimaryKeys")

      // Build nested projection of SeveralPrimaryKeys
      __innerSeveralPrimaryKeys2!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append('}')
  }
}

internal class QueryEscapesSelectionQueryImpl : EscapeProjectionImpl(), QueryEscapesSelectionQuery {
  override var `do`: Int? = null

  override var `by`: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: QueryEscapesSelectionSelection) {
    __selection.`do` = `do`
    __selection.`by` = `by`
  }
}

internal fun QueryDto.buildEntity(__innerContext: EscapeContext,
    __innerProjection: QueryProjectionImpl): Query =
    QueryImpl(__innerContext, __innerProjection, this)

internal fun QueryDto.resolveEscapes(__innerContext: EscapeContext,
    __innerProjection: EscapeProjectionImpl): List<Escape> =
    escapes?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun QueryDto.resolveEscapesSelection(__innerContext: EscapeContext,
    __innerProjection: EscapeProjectionImpl): List<Escape> =
    escapesSelection?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun QueryDto.resolveSeveralPrimaryKeys(__innerContext: EscapeContext,
    __innerProjection: SeveralPrimaryKeysProjectionImpl): SeveralPrimaryKeys? =
    severalPrimaryKeys?.buildEntity(__innerContext, __innerProjection)
