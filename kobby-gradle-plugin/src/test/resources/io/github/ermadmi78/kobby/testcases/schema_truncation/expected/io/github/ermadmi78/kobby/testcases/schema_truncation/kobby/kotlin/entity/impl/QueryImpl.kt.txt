@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.cinemaJson
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.QueryProjection
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.encodeToJsonElement

internal class QueryImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: QueryProjectionImpl,
  internal val __innerDto: QueryDto,
) : Query {
  override val country: Country? by lazy {
    if (__innerProjection.__innerCountry0 == null) {
      error("Property [country] is not available - add [country] projection to switch on it")
    }
    __innerDto.resolveCountry(__innerContext, __innerProjection.__innerCountry0!!)
  }

  override val countries: List<Country> by lazy {
    if (__innerProjection.__innerCountries1 == null) {
      error("Property [countries] is not available - add [countries] projection to switch on it")
    }
    __innerDto.resolveCountries(__innerContext, __innerProjection.__innerCountries1!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Query").append('(')

    var counter = 0

    if (__innerProjection.__innerCountry0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("country").append('=').append(country)
    }

    if (__innerProjection.__innerCountries1 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countries").append('=').append(countries)
    }

    append(')')
  }

  override fun __context(): CinemaContext = __innerContext

  override fun QueryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class QueryProjectionImpl : QueryProjection {
  internal var __innerCountry0: CountryProjectionImpl? = null

  internal var __innerCountry0Id: Long? = null

  internal var __innerCountries1: CountryProjectionImpl? = null

  internal var __innerCountries1Name: String? = null

  internal var __innerCountries1Limit: Int? = null

  internal var __innerCountries1Offset: Int? = null

  override fun country(id: Long, __projection: CountryProjection.() -> Unit) {
    __innerCountry0 = CountryProjectionImpl().apply(__projection)
    __innerCountry0Id = id
  }

  override fun countries(
    name: String?,
    limit: Int?,
    offset: Int?,
    __projection: CountryProjection.() -> Unit,
  ) {
    __innerCountries1 = CountryProjectionImpl().apply(__projection)
    __innerCountries1Name = name
    __innerCountries1Limit = limit
    __innerCountries1Offset = offset
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: QueryProjection) {
    if ("country" !in ignore && __innerCountry0 != null) {
      __projection.country(__innerCountry0Id!!) {
        this@QueryProjectionImpl.__innerCountry0!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("countries" !in ignore && __innerCountries1 != null) {
      __projection.countries(__innerCountries1Name, __innerCountries1Limit,
          __innerCountries1Offset) {
        this@QueryProjectionImpl.__innerCountries1!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: country
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCountry0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("country" !in ignore && __innerCountry0 != null) {
      body.append(' ').append("country")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: country.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerCountry0Id!!)
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      __innerCountry0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: countries
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCountries1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("countries" !in ignore && __innerCountries1 != null) {
      body.append(' ').append("countries")
      var counter = 0
      val addBrackets = __innerCountries1Name != null || __innerCountries1Limit != null ||
          __innerCountries1Offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: countries.name
      if (__innerCountries1Name != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerCountries1Name!!)
        body.append("name").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: countries.limit
      if (__innerCountries1Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerCountries1Limit!!)
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: countries.offset
      if (__innerCountries1Offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerCountries1Offset!!)
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      __innerCountries1!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    body.append(' ').append('{')

    // Field: country
    ____innerBuildCountry0(ignore, header, body, arguments)

    // Field: countries
    ____innerBuildCountries1(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun QueryDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: QueryProjectionImpl): Query =
    QueryImpl(__innerContext, __innerProjection, this)

internal fun QueryDto.resolveCountry(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country? =
    country?.buildEntity(__innerContext, __innerProjection)

internal fun QueryDto.resolveCountries(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): List<Country> =
    countries?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
