@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto.graphql

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonIgnoreProperties
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonSubTypes
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = EscapeClientMessageConnectionInit::class, name = "connection_init"),
  JsonSubTypes.Type(value = EscapeClientMessagePing::class, name = "ping"),
  JsonSubTypes.Type(value = EscapeClientMessagePong::class, name = "pong"),
  JsonSubTypes.Type(value = EscapeClientMessageSubscribe::class, name = "subscribe"),
  JsonSubTypes.Type(value = EscapeClientMessageComplete::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class EscapeClientMessage

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = EscapeServerMessageConnectionAck::class, name = "connection_ack"),
  JsonSubTypes.Type(value = EscapeServerMessagePing::class, name = "ping"),
  JsonSubTypes.Type(value = EscapeServerMessagePong::class, name = "pong"),
  JsonSubTypes.Type(value = EscapeServerMessageNext::class, name = "next"),
  JsonSubTypes.Type(value = EscapeServerMessageError::class, name = "error"),
  JsonSubTypes.Type(value = EscapeServerMessageComplete::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class EscapeServerMessage

/**
 * See ConnectionInit [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_init")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeClientMessageConnectionInit::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeClientMessageConnectionInit @JsonCreator constructor(
  public val payload: Map<String, Any?>? = null,
) : EscapeClientMessage()

/**
 * See ConnectionAck [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_ack")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessageConnectionAck::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessageConnectionAck @JsonCreator constructor(
  public val payload: Any? = null,
) : EscapeServerMessage()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeClientMessagePing::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeClientMessagePing @JsonCreator constructor(
  public val payload: Any? = null,
) : EscapeClientMessage()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeClientMessagePong::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeClientMessagePong @JsonCreator constructor(
  public val payload: Any? = null,
) : EscapeClientMessage()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessagePing::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessagePing @JsonCreator constructor(
  public val payload: Any? = null,
) : EscapeServerMessage()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessagePong::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessagePong @JsonCreator constructor(
  public val payload: Any? = null,
) : EscapeServerMessage()

/**
 * See Subscribe [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "subscribe")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeClientMessageSubscribe::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeClientMessageSubscribe(
  public val id: String,
  public val payload: EscapeRequest,
) : EscapeClientMessage()

/**
 * See Next [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "next")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessageNext::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessageNext(
  public val id: String,
  public val payload: EscapeSubscriptionResult,
) : EscapeServerMessage()

/**
 * See Error [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "error")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessageError::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessageError(
  public val id: String,
  @JsonInclude(value = JsonInclude.Include.NON_EMPTY)
  public val payload: List<EscapeError>? = null,
) : EscapeServerMessage()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeClientMessageComplete::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeClientMessageComplete @JsonCreator constructor(
  public val id: String,
) : EscapeClientMessage()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = EscapeServerMessageComplete::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class EscapeServerMessageComplete @JsonCreator constructor(
  public val id: String,
) : EscapeServerMessage()
