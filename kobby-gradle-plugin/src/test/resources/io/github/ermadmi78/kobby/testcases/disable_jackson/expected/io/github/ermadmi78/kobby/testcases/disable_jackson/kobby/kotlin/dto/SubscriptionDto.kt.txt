@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_jackson.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.disable_jackson.kobby.kotlin.CountryDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

public data class SubscriptionDto(
  public val countryCreated: CountryDto? = null,
)

public fun SubscriptionDto.toBuilder(): SubscriptionDtoBuilder = SubscriptionDtoBuilder().also {
  it.countryCreated = this.countryCreated
}

public fun SubscriptionDtoBuilder.toDto(): SubscriptionDto = SubscriptionDto(
  countryCreated
)

public fun SubscriptionDto(block: SubscriptionDtoBuilder.() -> Unit): SubscriptionDto =
    SubscriptionDtoBuilder().apply(block).toDto()

public fun SubscriptionDto.copy(block: SubscriptionDtoBuilder.() -> Unit): SubscriptionDto =
    toBuilder().apply(block).toDto()

@CountryDSL
public class SubscriptionDtoBuilder {
  public var countryCreated: CountryDto? = null
}
