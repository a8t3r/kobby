@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlContext
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MySubscriptionDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyEvent
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyEventProjection
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MySubscription
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MySubscriptionProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class MySubscriptionImpl(
  internal val __innerContext: GraphqlContext,
  internal val __innerProjection: MySubscriptionProjectionImpl,
  internal val __innerDto: MySubscriptionDto,
) : MySubscription {
  override val onInsert: MyEvent by lazy {
    if (__innerProjection.__innerOnInsert0 == null) {
      error("Property [onInsert] is not available - add [onInsert] projection to switch on it")
    }
    __innerDto.resolveOnInsert(__innerContext, __innerProjection.__innerOnInsert0!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("MySubscription").append('(')

    var counter = 0

    if (__innerProjection.__innerOnInsert0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("onInsert").append('=').append(onInsert)
    }

    append(')')
  }

  override fun __context(): GraphqlContext = __innerContext

  override fun MySubscriptionProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MySubscriptionProjectionImpl : MySubscriptionProjection {
  internal var __innerOnInsert0: MyEventProjectionImpl? = null

  internal var __innerOnInsert0Pattern: String? = null

  override fun onInsert(pattern: String?, __projection: MyEventProjection.() -> Unit) {
    __innerOnInsert0 = MyEventProjectionImpl().apply(__projection)
    __innerOnInsert0Pattern = pattern
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: MySubscriptionProjection) {
    if ("onInsert" !in ignore && __innerOnInsert0 != null) {
      __projection.onInsert(__innerOnInsert0Pattern) {
        this@MySubscriptionProjectionImpl.__innerOnInsert0!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: onInsert
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildOnInsert0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("onInsert" !in ignore && __innerOnInsert0 != null) {
      body.append(' ').append("onInsert")
      var counter = 0
      val addBrackets = __innerOnInsert0Pattern != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: onInsert.pattern
      if (__innerOnInsert0Pattern != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerOnInsert0Pattern!!
        body.append("pattern").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of MyEvent
      __innerOnInsert0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: onInsert
    ____innerBuildOnInsert0(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun MySubscriptionDto.buildEntity(__innerContext: GraphqlContext,
    __innerProjection: MySubscriptionProjectionImpl): MySubscription =
    MySubscriptionImpl(__innerContext, __innerProjection, this)

internal fun MySubscriptionDto.resolveOnInsert(__innerContext: GraphqlContext,
    __innerProjection: MyEventProjectionImpl): MyEvent =
    onInsert?.buildEntity(__innerContext, __innerProjection)!!
