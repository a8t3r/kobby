@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Int
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Query {
  public val escapes: List<Escape>

  public val escapesSelection: List<Escape>

  public val severalPrimaryKeys: SeveralPrimaryKeys?

  public fun __context(): EscapeContext

  public fun QueryProjection.__withCurrentProjection()
}

@EscapeDSL
public interface QueryProjection {
  /**
   * @param do Default: 0
   * @param by Default: 100
   */
  public fun escapes(
    `do`: Int? = null,
    `by`: Int? = null,
    __projection: EscapeProjection.() -> Unit = {},
  )

  public fun escapesSelection(__query: QueryEscapesSelectionQuery.() -> Unit = {})

  public fun severalPrimaryKeys(__projection: SeveralPrimaryKeysProjection.() -> Unit = {})

  public fun __minimize() {
  }
}

@EscapeDSL
public interface QueryEscapesSelectionSelection {
  /**
   * Default: 0
   */
  public var `do`: Int?

  /**
   * Default: 100
   */
  public var `by`: Int?
}

@EscapeDSL
public interface QueryEscapesSelectionQuery : QueryEscapesSelectionSelection, EscapeProjection
