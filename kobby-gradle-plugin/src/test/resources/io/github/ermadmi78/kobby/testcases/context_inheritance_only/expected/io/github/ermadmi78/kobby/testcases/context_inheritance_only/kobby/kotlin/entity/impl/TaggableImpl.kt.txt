@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.ActorDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.TaggableDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.ActorProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.FilmProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.TagProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Taggable
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.TaggableQualifiedProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.collections.Set
import kotlin.collections.mutableSetOf
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder

internal open class TaggableQualifiedProjectionImpl : TaggableQualifiedProjection {
  internal val ___innerIgnore: MutableSet<String> = mutableSetOf("id")

  internal var __innerTags1: TagProjectionImpl? = null

  internal val ___inner__onFilm: FilmProjectionImpl = FilmProjectionImpl()

  internal val ___inner__onActor: ActorProjectionImpl = ActorProjectionImpl()

  public override fun tags(__projection: TagProjection.() -> Unit): Unit {
    __innerTags1 = TagProjectionImpl().apply(__projection)

    ___inner__onFilm.__innerTags1 = __innerTags1

    ___inner__onActor.__innerTags1 = __innerTags1

    ___innerIgnore += "tags"
  }

  public override fun __onFilm(__projection: FilmProjection.() -> Unit): Unit {
    FilmProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onFilm)
  }

  public override fun __onActor(__projection: ActorProjection.() -> Unit): Unit {
    ActorProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onActor)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: TaggableQualifiedProjection): Unit {
    if ("tags" !in ignore && __innerTags1 != null) {
      __projection.tags {
        this@TaggableQualifiedProjectionImpl.__innerTags1!!.___innerRepeatProjection(setOf(), this)
      }
    }
    __projection.__onFilm {
      this@TaggableQualifiedProjectionImpl.___inner__onFilm.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onActor {
      this@TaggableQualifiedProjectionImpl.___inner__onActor.___innerRepeatProjection(setOf(), this)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: tags
    if ("tags" !in ignore && __innerTags1 != null) {
      body.append(' ').append("tags")

      // Build nested projection of Tag
      __innerTags1!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Film
    subBody.clear()
    ___inner__onFilm.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Film").append(subBody)
    }

    // Qualification of: Actor
    subBody.clear()
    ___inner__onActor.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Actor").append(subBody)
    }

    body.append(' ').append('}')
  }
}

internal fun TaggableDto.buildEntity(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: TaggableQualifiedProjectionImpl): Taggable = when(this) {
  is FilmDto -> FilmImpl(__innerContext, __innerProjection.___inner__onFilm, this)
  is ActorDto -> ActorImpl(__innerContext, __innerProjection.___inner__onActor, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
