@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Actor
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.ActorProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.FilmProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Tag
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.TagProjection
import java.time.LocalDate
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class FilmImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: FilmProjectionImpl,
  internal val __innerDto: FilmDto,
) : Film {
  override val id: Long
    get() = __innerDto.id!!

  override val fields: Map<String, Any?>
    get() {
      if (!__innerProjection.__innerFields1) {
        error("Property [fields] is not available - add [fields] projection to switch on it")
      }
      return __innerDto.fields!!
    }

  override val tags: List<Tag> by lazy {
    if (__innerProjection.__innerTags2 == null) {
      error("Property [tags] is not available - add [tags] projection to switch on it")
    }
    __innerDto.resolveTags(__innerContext, __innerProjection.__innerTags2!!)
  }

  override val title: String
    get() {
      if (!__innerProjection.__innerTitle3) {
        error("Property [title] is not available - remove [__withoutTitle] projection to switch on it")
      }
      return __innerDto.title!!
    }

  override val genre: Genre
    get() {
      if (!__innerProjection.__innerGenre4) {
        error("Property [genre] is not available - add [genre] projection to switch on it")
      }
      return __innerDto.genre!!
    }

  override val countryId: Long
    get() = __innerDto.countryId!!

  override val country: Country by lazy {
    if (__innerProjection.__innerCountry6 == null) {
      error("Property [country] is not available - add [country] projection to switch on it")
    }
    __innerDto.resolveCountry(__innerContext, __innerProjection.__innerCountry6!!)
  }

  override val actors: List<Actor> by lazy {
    if (__innerProjection.__innerActors7 == null) {
      error("Property [actors] is not available - add [actors] projection to switch on it")
    }
    __innerDto.resolveActors(__innerContext, __innerProjection.__innerActors7!!)
  }

  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as FilmImpl
    return __innerDto.id == other.__innerDto.id
  }

  override fun hashCode(): Int = __innerDto.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Film").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerFields1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("fields").append('=').append(fields)
    }

    if (__innerProjection.__innerTags2 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("tags").append('=').append(tags)
    }

    if (__innerProjection.__innerTitle3) {
      if (counter++ > 0) {
        append(", ")
      }
      append("title").append('=').append(title)
    }

    if (__innerProjection.__innerGenre4) {
      if (counter++ > 0) {
        append(", ")
      }
      append("genre").append('=').append(genre)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countryId").append('=').append(countryId)
    }

    if (__innerProjection.__innerCountry6 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("country").append('=').append(country)
    }

    if (__innerProjection.__innerActors7 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    append(')')
  }

  override fun __context(): CinemaContext = __innerContext

  override fun FilmProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class FilmProjectionImpl : FilmProjection {
  internal var __innerFields1: Boolean = false

  internal var __innerFields1Keys: List<String>? = null

  internal var __innerTags2: TagProjectionImpl? = null

  internal var __innerTitle3: Boolean = true

  internal var __innerGenre4: Boolean = false

  override val genre: Unit
    get() {
      __innerGenre4 = true
    }

  internal var __innerCountry6: CountryProjectionImpl? = null

  internal var __innerActors7: ActorProjectionImpl? = null

  internal var __innerActors7FirstName: String? = null

  internal var __innerActors7LastName: String? = null

  internal var __innerActors7BirthdayFrom: LocalDate? = null

  internal var __innerActors7BirthdayTo: LocalDate? = null

  internal var __innerActors7Gender: Gender? = null

  internal var __innerActors7Limit: Int? = null

  internal var __innerActors7Offset: Int? = null

  override fun fields(keys: List<String>?) {
    __innerFields1 = true
    __innerFields1Keys = keys
  }

  override fun tags(__projection: TagProjection.() -> Unit) {
    __innerTags2 = TagProjectionImpl().apply(__projection)
  }

  override fun __withoutTitle() {
    __innerTitle3 = false
  }

  override fun country(__projection: CountryProjection.() -> Unit) {
    __innerCountry6 = CountryProjectionImpl().apply(__projection)
  }

  override fun actors(
    firstName: String?,
    lastName: String?,
    birthdayFrom: LocalDate?,
    birthdayTo: LocalDate?,
    gender: Gender?,
    limit: Int?,
    offset: Int?,
    __projection: ActorProjection.() -> Unit,
  ) {
    __innerActors7 = ActorProjectionImpl().apply(__projection)
    __innerActors7FirstName = firstName
    __innerActors7LastName = lastName
    __innerActors7BirthdayFrom = birthdayFrom
    __innerActors7BirthdayTo = birthdayTo
    __innerActors7Gender = gender
    __innerActors7Limit = limit
    __innerActors7Offset = offset
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: FilmProjection) {
    if ("fields" !in ignore && __innerFields1) {
      __projection.fields(__innerFields1Keys)
    }
    if ("tags" !in ignore && __innerTags2 != null) {
      __projection.tags {
        this@FilmProjectionImpl.__innerTags2!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("title" !in ignore && !__innerTitle3) {
      __projection.__withoutTitle()
    }
    if ("genre" !in ignore && __innerGenre4) {
      __projection.genre
    }
    if ("country" !in ignore && __innerCountry6 != null) {
      __projection.country {
        this@FilmProjectionImpl.__innerCountry6!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("actors" !in ignore && __innerActors7 != null) {
      __projection.actors(__innerActors7FirstName, __innerActors7LastName,
          __innerActors7BirthdayFrom, __innerActors7BirthdayTo, __innerActors7Gender,
          __innerActors7Limit, __innerActors7Offset) {
        this@FilmProjectionImpl.__innerActors7!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFields1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("fields" !in ignore && __innerFields1) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = __innerFields1Keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (__innerFields1Keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFields1Keys!!
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActors7(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actors" !in ignore && __innerActors7 != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = __innerActors7FirstName != null || __innerActors7LastName != null ||
          __innerActors7BirthdayFrom != null || __innerActors7BirthdayTo != null ||
          __innerActors7Gender != null || __innerActors7Limit != null ||
          __innerActors7Offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (__innerActors7FirstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7FirstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.lastName
      if (__innerActors7LastName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7LastName!!
        body.append("lastName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.birthdayFrom
      if (__innerActors7BirthdayFrom != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7BirthdayFrom!!
        body.append("birthdayFrom").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Date")
      }

      // Argument: actors.birthdayTo
      if (__innerActors7BirthdayTo != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7BirthdayTo!!
        body.append("birthdayTo").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Date")
      }

      // Argument: actors.gender
      if (__innerActors7Gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7Gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (__innerActors7Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7Limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: actors.offset
      if (__innerActors7Offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors7Offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActors7!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    ____innerBuildFields1(ignore, header, body, arguments)

    // Field: tags
    if ("tags" !in ignore && __innerTags2 != null) {
      body.append(' ').append("tags")

      // Build nested projection of Tag
      __innerTags2!!.___innerBuild(setOf(), header, body, arguments)
    }

    // Field: title
    if ("title" !in ignore && __innerTitle3) {
      body.append(' ').append("title")
    }

    // Field: genre
    if ("genre" !in ignore && __innerGenre4) {
      body.append(' ').append("genre")
    }

    // Field: countryId
    if ("countryId" !in ignore) {
      body.append(' ').append("countryId")
    }

    // Field: country
    if ("country" !in ignore && __innerCountry6 != null) {
      body.append(' ').append("country")

      // Build nested projection of Country
      __innerCountry6!!.___innerBuild(setOf(), header, body, arguments)
    }

    // Field: actors
    ____innerBuildActors7(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun FilmDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: FilmProjectionImpl): Film = FilmImpl(__innerContext, __innerProjection, this)

internal fun FilmDto.resolveTags(__innerContext: CinemaContext,
    __innerProjection: TagProjectionImpl): List<Tag> =
    tags?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun FilmDto.resolveCountry(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country =
    country?.buildEntity(__innerContext, __innerProjection)!!

internal fun FilmDto.resolveActors(__innerContext: CinemaContext,
    __innerProjection: ActorProjectionImpl): List<Actor> =
    actors?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
