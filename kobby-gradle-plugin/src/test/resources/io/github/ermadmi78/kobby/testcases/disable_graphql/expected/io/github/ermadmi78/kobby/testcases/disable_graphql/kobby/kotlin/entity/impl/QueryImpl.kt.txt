@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.CountryContext
import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.disable_graphql.kobby.kotlin.entity.QueryProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class QueryImpl(
  internal val __innerContext: CountryContext,
  internal val __innerProjection: QueryProjectionImpl,
  internal val __innerDto: QueryDto,
) : Query {
  override val countries: List<Country> by lazy {
    if (__innerProjection.__innerCountries0 == null) {
      error("Property [countries] is not available - add [countries] projection to switch on it")
    }
    __innerDto.resolveCountries(__innerContext, __innerProjection.__innerCountries0!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Query").append('(')

    var counter = 0

    if (__innerProjection.__innerCountries0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countries").append('=').append(countries)
    }

    append(')')
  }

  override fun __context(): CountryContext = __innerContext

  override fun QueryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class QueryProjectionImpl : QueryProjection {
  internal var __innerCountries0: CountryProjectionImpl? = null

  override fun countries(__projection: CountryProjection.() -> Unit) {
    __innerCountries0 = CountryProjectionImpl().apply(__projection)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: QueryProjection) {
    if ("countries" !in ignore && __innerCountries0 != null) {
      __projection.countries {
        this@QueryProjectionImpl.__innerCountries0!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: countries
    if ("countries" !in ignore && __innerCountries0 != null) {
      body.append(' ').append("countries")

      // Build nested projection of Country
      __innerCountries0!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append('}')
  }
}

internal fun QueryDto.buildEntity(__innerContext: CountryContext,
    __innerProjection: QueryProjectionImpl): Query =
    QueryImpl(__innerContext, __innerProjection, this)

internal fun QueryDto.resolveCountries(__innerContext: CountryContext,
    __innerProjection: CountryProjectionImpl): List<Country> =
    countries?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
