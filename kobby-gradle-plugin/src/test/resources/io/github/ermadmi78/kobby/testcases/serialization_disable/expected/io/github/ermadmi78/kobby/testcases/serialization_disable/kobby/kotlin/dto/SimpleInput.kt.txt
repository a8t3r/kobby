@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleDSL
import java.time.LocalDate
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error

public data class SimpleInput(
  public val name: String,
  public val date: LocalDate? = null,
)

public fun SimpleInput.toBuilder(): SimpleInputBuilder = SimpleInputBuilder().also {
  it.name = this.name
  it.date = this.date
}

public fun SimpleInputBuilder.toInput(): SimpleInput = SimpleInput(
  name ?: error("SimpleInput: 'name' must not be null"),
  date
)

public fun SimpleInput(block: SimpleInputBuilder.() -> Unit): SimpleInput =
    SimpleInputBuilder().apply(block).toInput()

public fun SimpleInput.copy(block: SimpleInputBuilder.() -> Unit): SimpleInput =
    toBuilder().apply(block).toInput()

@SimpleDSL
public class SimpleInputBuilder {
  public var name: String? = null

  public var date: LocalDate? = null
}
