@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql

import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonClassDiscriminator
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject

/**
 * Message protocol description see
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@OptIn(ExperimentalSerializationApi::class)
@JsonClassDiscriminator("type")
public sealed class CinemaClientMessage

/**
 * Message protocol description see
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@OptIn(ExperimentalSerializationApi::class)
@JsonClassDiscriminator("type")
public sealed class CinemaServerMessage

/**
 * See GQL_CONNECTION_INIT
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("connection_init")
public data class CinemaMessageConnectionInit(
  public val payload: JsonObject? = null,
) : CinemaClientMessage()

/**
 * See GQL_START
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("start")
public data class CinemaMessageStart(
  public val id: String,
  public val payload: CinemaRequest,
) : CinemaClientMessage()

/**
 * See GQL_STOP
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("stop")
public data class CinemaMessageStop(
  public val id: String,
) : CinemaClientMessage()

/**
 * See GQL_CONNECTION_TERMINATE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("connection_terminate")
@Suppress("CanSealedSubClassBeObject")
public class CinemaMessageConnectionTerminate : CinemaClientMessage()

/**
 * See GQL_CONNECTION_ERROR
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("connection_error")
public data class CinemaMessageConnectionError(
  public val payload: JsonElement? = null,
) : CinemaServerMessage()

/**
 * See GQL_CONNECTION_ACK
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("connection_ack")
public data class CinemaMessageConnectionAck(
  public val payload: JsonElement? = null,
) : CinemaServerMessage()

/**
 * See GQL_DATA
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("data")
public data class CinemaMessageData(
  public val id: String,
  public val payload: CinemaSubscriptionResult,
) : CinemaServerMessage()

/**
 * See GQL_ERROR
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("error")
public data class CinemaMessageError(
  public val id: String,
  public val payload: CinemaErrorResult,
) : CinemaServerMessage()

/**
 * See GQL_COMPLETE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("complete")
public data class CinemaMessageComplete(
  public val id: String,
) : CinemaServerMessage()

/**
 * See GQL_CONNECTION_KEEP_ALIVE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
@Serializable
@SerialName("ka")
@Suppress("CanSealedSubClassBeObject")
public class CinemaMessageConnectionKeepAlive : CinemaServerMessage()
