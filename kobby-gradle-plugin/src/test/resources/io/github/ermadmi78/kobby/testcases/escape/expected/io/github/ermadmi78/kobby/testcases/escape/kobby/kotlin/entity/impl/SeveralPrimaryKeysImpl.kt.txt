@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto.SeveralPrimaryKeysDto
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.SeveralPrimaryKeys
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.SeveralPrimaryKeysProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class SeveralPrimaryKeysImpl(
  internal val __innerContext: EscapeContext,
  internal val __innerProjection: SeveralPrimaryKeysProjectionImpl,
  internal val __innerDto: SeveralPrimaryKeysDto,
) : SeveralPrimaryKeys {
  public override val `if`: Long
    get() = __innerDto.`if`!!

  public override val `do`: String?
    get() = __innerDto.`do`

  public override val `while`: Int
    get() = __innerDto.`while`!!

  public override val it: String?
    get() = __innerDto.it

  public override val other: String?
    get() = __innerDto.other

  public override val result: Int
    get() = __innerDto.result!!

  public override val block: String?
    get() = __innerDto.block

  public override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as SeveralPrimaryKeysImpl

    if (__innerDto.`if` != other.__innerDto.`if`) {
      return false
    }
    if (__innerDto.`do` != other.__innerDto.`do`) {
      return false
    }
    if (__innerDto.`while` != other.__innerDto.`while`) {
      return false
    }
    if (__innerDto.it != other.__innerDto.it) {
      return false
    }
    if (__innerDto.other != other.__innerDto.other) {
      return false
    }
    if (__innerDto.result != other.__innerDto.result) {
      return false
    }
    if (__innerDto.block != other.__innerDto.block) {
      return false
    }

    return true
  }

  public override fun hashCode(): Int {
    var result = __innerDto.`if`?.hashCode() ?: 0
    result = 31 * result + (__innerDto.`do`?.hashCode() ?: 0)
    result = 31 * result + (__innerDto.`while`?.hashCode() ?: 0)
    result = 31 * result + (__innerDto.it?.hashCode() ?: 0)
    result = 31 * result + (__innerDto.other?.hashCode() ?: 0)
    result = 31 * result + (__innerDto.result?.hashCode() ?: 0)
    result = 31 * result + (__innerDto.block?.hashCode() ?: 0)
    return result
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("SeveralPrimaryKeys").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("if").append('=').append(`if`)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("do").append('=').append(`do`)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("while").append('=').append(`while`)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("it").append('=').append(it)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("other").append('=').append(other)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("result").append('=').append(result)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("block").append('=').append(block)
    }

    append(')')
  }

  public override fun __context(): EscapeContext = __innerContext

  public override fun SeveralPrimaryKeysProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class SeveralPrimaryKeysProjectionImpl : SeveralPrimaryKeysProjection {
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: SeveralPrimaryKeysProjection): Unit {
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: if
    if ("if" !in ignore) {
      body.append(' ').append("if")
    }

    // Field: do
    if ("do" !in ignore) {
      body.append(' ').append("do")
    }

    // Field: while
    if ("while" !in ignore) {
      body.append(' ').append("while")
    }

    // Field: it
    if ("it" !in ignore) {
      body.append(' ').append("it")
    }

    // Field: other
    if ("other" !in ignore) {
      body.append(' ').append("other")
    }

    // Field: result
    if ("result" !in ignore) {
      body.append(' ').append("result")
    }

    // Field: block
    if ("block" !in ignore) {
      body.append(' ').append("block")
    }

    body.append(' ').append('}')
  }
}

internal fun SeveralPrimaryKeysDto.buildEntity(__innerContext: EscapeContext,
    __innerProjection: SeveralPrimaryKeysProjectionImpl): SeveralPrimaryKeys =
    SeveralPrimaryKeysImpl(__innerContext, __innerProjection, this)
