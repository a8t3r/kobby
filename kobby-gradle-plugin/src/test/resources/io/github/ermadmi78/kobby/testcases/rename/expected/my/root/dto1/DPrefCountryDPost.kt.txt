@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.dto1

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import my.root.ctx.PrefCtxDSLPostCtx

@JsonTypeName(value = "Country")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = DPrefCountryDPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class DPrefCountryDPost(
  override val id: Long? = null,
  override val fields: String? = null,
  public val name: String? = null,
  public val film: DPrefFilmDPost? = null,
  public val films: List<DPrefFilmDPost>? = null,
  public val actor: DPrefActorDPost? = null,
  public val actors: List<DPrefActorDPost>? = null,
  public val native: List<DPrefNativeDPost>? = null,
) : DPrefEntityDPost {
  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as DPrefCountryDPost
    return this.id == other.id
  }

  override fun hashCode(): Int = this.id?.hashCode() ?: 0
}

public fun DPrefCountryDPost.myBuilder1(): BPrefDPrefCountryDPostBPost =
    BPrefDPrefCountryDPostBPost().also {
  it.id = this.id
  it.fields = this.fields
  it.name = this.name
  it.film = this.film
  it.films = this.films
  it.actor = this.actor
  it.actors = this.actors
  it.native = this.native
}

public fun BPrefDPrefCountryDPostBPost.myDto2(): DPrefCountryDPost = DPrefCountryDPost(
  id,
  fields,
  name,
  film,
  films,
  actor,
  actors,
  native
)

public fun DPrefCountryDPost(block: BPrefDPrefCountryDPostBPost.() -> Unit): DPrefCountryDPost =
    BPrefDPrefCountryDPostBPost().apply(block).myDto2()

public fun DPrefCountryDPost.replicate(block: BPrefDPrefCountryDPostBPost.() -> Unit):
    DPrefCountryDPost = myBuilder1().apply(block).myDto2()

@PrefCtxDSLPostCtx
public class BPrefDPrefCountryDPostBPost {
  public var id: Long? = null

  public var fields: String? = null

  public var name: String? = null

  public var film: DPrefFilmDPost? = null

  public var films: List<DPrefFilmDPost>? = null

  public var actor: DPrefActorDPost? = null

  public var actors: List<DPrefActorDPost>? = null

  public var native: List<DPrefNativeDPost>? = null
}
