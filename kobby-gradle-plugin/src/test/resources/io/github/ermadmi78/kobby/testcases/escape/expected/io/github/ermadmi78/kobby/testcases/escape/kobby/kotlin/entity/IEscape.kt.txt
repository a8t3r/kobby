@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface IEscape {
  public val `is`: String

  public val `for`: Int?

  public val points: List<Point>

  public fun __context(): EscapeContext
}

@EscapeDSL
public interface IEscapeProjection {
  public fun `is`()

  /**
   * @param do Default: 0
   * @param by Default: 100
   */
  public fun points(
    `do`: Int? = null,
    `by`: Int? = null,
    __projection: PointProjection.() -> Unit,
  )

  public fun __minimize() {
  }
}

@EscapeDSL
public interface IEscapeQualification {
  public fun __onEscape(__projection: EscapeProjection.() -> Unit = {})
}

@EscapeDSL
public interface IEscapeQualifiedProjection : IEscapeProjection, IEscapeQualification
