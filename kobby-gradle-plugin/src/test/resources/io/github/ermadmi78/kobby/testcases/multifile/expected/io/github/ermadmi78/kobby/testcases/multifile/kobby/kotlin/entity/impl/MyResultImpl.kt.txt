@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlContext
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyResultDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyResult
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyResultProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class MyResultImpl(
  internal val __innerContext: GraphqlContext,
  internal val __innerProjection: MyResultProjectionImpl,
  internal val __innerDto: MyResultDto,
) : MyResult {
  public override val id: Long
    get() {
      if (!__innerProjection.__innerId0) {
        error("Property [id] is not available - add [id] projection to switch on it")
      }
      return __innerDto.id!!
    }

  public override val name: String?
    get() {
      if (!__innerProjection.__innerName1) {
        error("Property [name] is not available - add [name] projection to switch on it")
      }
      return __innerDto.name
    }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("MyResult").append('(')

    var counter = 0

    if (__innerProjection.__innerId0) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerName1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    append(')')
  }

  public override fun __context(): GraphqlContext = __innerContext

  public override fun MyResultProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MyResultProjectionImpl : MyResultProjection {
  internal var __innerId0: Boolean = false

  internal var __innerName1: Boolean = false

  public override fun id(): Unit {
    __innerId0 = true
  }

  public override fun name(): Unit {
    __innerName1 = true
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: MyResultProjection):
      Unit {
    if ("id" !in ignore && __innerId0) {
      __projection.id()
    }
    if ("name" !in ignore && __innerName1) {
      __projection.name()
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore && __innerId0) {
      body.append(' ').append("id")
    }

    // Field: name
    if ("name" !in ignore && __innerName1) {
      body.append(' ').append("name")
    }

    body.append(' ').append('}')
  }
}

internal fun MyResultDto.buildEntity(__innerContext: GraphqlContext,
    __innerProjection: MyResultProjectionImpl): MyResult =
    MyResultImpl(__innerContext, __innerProjection, this)
