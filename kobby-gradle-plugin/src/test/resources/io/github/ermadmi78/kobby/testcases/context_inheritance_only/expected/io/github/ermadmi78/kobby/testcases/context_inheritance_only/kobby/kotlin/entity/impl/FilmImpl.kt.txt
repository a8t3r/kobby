@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlySubscriber
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Actor
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.FilmActorsQuery
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.FilmActorsSelection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.FilmProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.SubscriptionProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Tag
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.TagProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class FilmImpl(
  internal val __innerContext: ContextInheritanceOnlyContext,
  internal val __innerProjection: FilmProjectionImpl,
  internal val __innerDto: FilmDto,
) : Film {
  public override val id: Long
    get() = __innerDto.id!!

  public override val tags: List<Tag> by lazy {
    if (__innerProjection.__innerTags1 == null) {
      error("Property [tags] is not available - add [tags] projection to switch on it")
    }
    __innerDto.resolveTags(__innerContext, __innerProjection.__innerTags1!!)
  }


  public override val title: String
    get() {
      if (!__innerProjection.__innerTitle2) {
        error("Property [title] is not available - remove [__withoutTitle] projection to switch on it")
      }
      return __innerDto.title!!
    }

  public override val genre: Genre
    get() {
      if (!__innerProjection.__innerGenre3) {
        error("Property [genre] is not available - add [genre] projection to switch on it")
      }
      return __innerDto.genre!!
    }

  public override val countryId: Long
    get() = __innerDto.countryId!!

  public override val country: Country by lazy {
    if (__innerProjection.__innerCountry5 == null) {
      error("Property [country] is not available - add [country] projection to switch on it")
    }
    __innerDto.resolveCountry(__innerContext, __innerProjection.__innerCountry5!!)
  }


  public override val actors: List<Actor> by lazy {
    if (__innerProjection.__innerActors6 == null) {
      error("Property [actors] is not available - add [actors] projection to switch on it")
    }
    __innerDto.resolveActors(__innerContext, __innerProjection.__innerActors6!!)
  }


  public override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as FilmImpl
    return __innerDto.id == other.__innerDto.id
  }

  public override fun hashCode(): Int = __innerDto.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Film").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerTags1 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("tags").append('=').append(tags)
    }

    if (__innerProjection.__innerTitle2) {
      if (counter++ > 0) {
        append(", ")
      }
      append("title").append('=').append(title)
    }

    if (__innerProjection.__innerGenre3) {
      if (counter++ > 0) {
        append(", ")
      }
      append("genre").append('=').append(genre)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countryId").append('=').append(countryId)
    }

    if (__innerProjection.__innerCountry5 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("country").append('=').append(country)
    }

    if (__innerProjection.__innerActors6 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    append(')')
  }

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ContextInheritanceOnlySubscriber<Subscription> = __innerContext.subscription(__projection)

  public override fun FilmProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class FilmProjectionImpl : FilmProjection {
  internal var __innerTags1: TagProjectionImpl? = null

  internal var __innerTitle2: Boolean = true

  internal var __innerGenre3: Boolean = false

  internal var __innerCountry5: CountryProjectionImpl? = null

  internal var __innerActors6: FilmActorsQueryImpl? = null

  public override fun tags(__projection: TagProjection.() -> Unit): Unit {
    __innerTags1 = TagProjectionImpl().apply(__projection)
  }

  public override fun __withoutTitle(): Unit {
    __innerTitle2 = false
  }

  public override fun genre(): Unit {
    __innerGenre3 = true
  }

  public override fun country(__projection: CountryProjection.() -> Unit): Unit {
    __innerCountry5 = CountryProjectionImpl().apply(__projection)
  }

  public override fun actors(__query: FilmActorsQuery.() -> Unit): Unit {
    __innerActors6 = FilmActorsQueryImpl().apply(__query)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: FilmProjection): Unit {
    if ("tags" !in ignore && __innerTags1 != null) {
      __projection.tags {
        this@FilmProjectionImpl.__innerTags1!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("title" !in ignore && !__innerTitle2) {
      __projection.__withoutTitle()
    }
    if ("genre" !in ignore && __innerGenre3) {
      __projection.genre()
    }
    if ("country" !in ignore && __innerCountry5 != null) {
      __projection.country {
        this@FilmProjectionImpl.__innerCountry5!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("actors" !in ignore && __innerActors6 != null) {
      __projection.actors {
        this@FilmProjectionImpl.__innerActors6!!.___innerRepeatProjection(setOf(), this)
        this@FilmProjectionImpl.__innerActors6!!.___innerRepeatSelection(this)
      }
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActors6(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("actors" !in ignore && __innerActors6 != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = __innerActors6!!.firstName != null || __innerActors6!!.gender != null ||
          __innerActors6!!.limit != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (__innerActors6!!.firstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6!!.firstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.gender
      if (__innerActors6!!.gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6!!.gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (__innerActors6!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActors6!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: tags
    if ("tags" !in ignore && __innerTags1 != null) {
      body.append(' ').append("tags")

      // Build nested projection of Tag
      __innerTags1!!.___innerBuild(setOf(), header, body, arguments)
    }

    // Field: title
    if ("title" !in ignore && __innerTitle2) {
      body.append(' ').append("title")
    }

    // Field: genre
    if ("genre" !in ignore && __innerGenre3) {
      body.append(' ').append("genre")
    }

    // Field: countryId
    if ("countryId" !in ignore) {
      body.append(' ').append("countryId")
    }

    // Field: country
    if ("country" !in ignore && __innerCountry5 != null) {
      body.append(' ').append("country")

      // Build nested projection of Country
      __innerCountry5!!.___innerBuild(setOf(), header, body, arguments)
    }

    // Field: actors
    ____innerBuildActors6(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal class FilmActorsQueryImpl : ActorProjectionImpl(), FilmActorsQuery {
  public override var firstName: String? = null

  public override var gender: Gender? = null

  public override var limit: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: FilmActorsSelection): Unit {
    __selection.firstName = firstName
    __selection.gender = gender
    __selection.limit = limit
  }
}

internal fun FilmDto.buildEntity(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: FilmProjectionImpl): Film = FilmImpl(__innerContext, __innerProjection, this)

internal fun FilmDto.resolveTags(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: TagProjectionImpl): List<Tag> =
    tags?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun FilmDto.resolveCountry(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: CountryProjectionImpl): Country =
    country?.buildEntity(__innerContext, __innerProjection)!!

internal fun FilmDto.resolveActors(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: ActorProjectionImpl): List<Actor> =
    actors?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
