@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.PaintContext
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.PolygonDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.RectangleDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.SquareDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.Polygon
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.PolygonQualifiedProjection
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.RectangleProjection
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.SquareProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder

internal open class PolygonQualifiedProjectionImpl : PolygonQualifiedProjection {
  internal val ___inner__onSquare: SquareProjectionImpl = SquareProjectionImpl()

  internal val ___inner__onRectangle: RectangleProjectionImpl = RectangleProjectionImpl()

  override fun __onSquare(__projection: SquareProjection.() -> Unit) {
    SquareProjectionImpl().apply(__projection).___innerRepeatProjection(setOf(), ___inner__onSquare)
  }

  override fun __onRectangle(__projection: RectangleProjection.() -> Unit) {
    RectangleProjectionImpl().apply(__projection).___innerRepeatProjection(setOf(), ___inner__onRectangle)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: PolygonQualifiedProjection) {
    __projection.__onSquare {
      this@PolygonQualifiedProjectionImpl.___inner__onSquare.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onRectangle {
      this@PolygonQualifiedProjectionImpl.___inner__onRectangle.___innerRepeatProjection(setOf(), this)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Square
    subBody.clear()
    ___inner__onSquare.___innerBuild(setOf(), header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Square").append(subBody)
    }

    // Qualification of: Rectangle
    subBody.clear()
    ___inner__onRectangle.___innerBuild(setOf(), header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Rectangle").append(subBody)
    }

    body.append(' ').append('}')
  }
}

internal fun PolygonDto.buildEntity(__innerContext: PaintContext,
    __innerProjection: PolygonQualifiedProjectionImpl): Polygon = when(this) {
  is SquareDto -> SquareImpl(__innerContext, __innerProjection.___inner__onSquare, this)
  is RectangleDto -> RectangleImpl(__innerContext, __innerProjection.___inner__onRectangle, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
