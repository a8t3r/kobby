@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaDSL
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlinx.serialization.json.JsonObject

/**
 * Country entity.
 * The country can be home to several films and several actors.
 */
public interface Country : Entity {
  /**
   * Unique identifier of entity
   */
  override val id: Long

  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  override val fields: JsonObject

  /**
   * The name of the country
   */
  public val name: String

  override fun __context(): CinemaContext

  public fun CountryProjection.__withCurrentProjection()
}

/**
 * Country entity.
 * The country can be home to several films and several actors.
 */
@CinemaDSL
public interface CountryProjection : EntityProjection {
  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  override fun fields(__selection: EntityFieldsSelection.() -> Unit)

  /**
   * The name of the country
   */
  public fun __withoutName()

  override fun __minimize() {
    __withoutName()
  }
}
