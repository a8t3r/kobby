@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.entity.MutationProjection
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlinx.serialization.json.JsonElement

internal class MutationImpl(
  internal val __innerContext: SimpleContext,
  internal val __innerProjection: MutationProjectionImpl,
  internal val __innerDto: MutationDto,
) : Mutation {
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Mutation").append('(')
    append(')')
  }

  public override fun __context(): SimpleContext = __innerContext

  public override fun MutationProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MutationProjectionImpl : MutationProjection {
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: MutationProjection):
      Unit {
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ): Unit {
    body.append(' ').append('{')

    body.append(' ').append('}')
  }
}

internal fun MutationDto.buildEntity(__innerContext: SimpleContext,
    __innerProjection: MutationProjectionImpl): Mutation =
    MutationImpl(__innerContext, __innerProjection, this)
