@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaDSL
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Query {
  /**
   * Find country by id.
   * Returns null if not found.
   */
  public val country: Country?

  /**
   * Find countries by name.
   * Returns empty list if not found.
   */
  public val countries: List<Country>

  public fun __context(): CinemaContext

  public fun QueryProjection.__withCurrentProjection()
}

@CinemaDSL
public interface QueryProjection {
  /**
   * Find country by id.
   * Returns null if not found.
   */
  public fun country(id: Long, __projection: CountryProjection.() -> Unit = {})

  /**
   * Find countries by name.
   * Returns empty list if not found.
   *
   * @param name Part of name of country to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited. Default: 10
   * @param offset Offset of result list. Default: 0
   */
  public fun countries(
    name: String? = null,
    limit: Int? = null,
    offset: Int? = null,
    __projection: CountryProjection.() -> Unit = {},
  )

  public fun __minimize() {
  }
}
