@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit

public interface IntermediateBase {
  public val intermediateNoOverride: String

  public val intermediateMultiOverride: String

  public fun __context(): MultiOverrideContext
}

@MultiOverrideDSL
public interface IntermediateBaseProjection {
  public fun intermediateNoOverride(size: Int? = null)

  public fun intermediateMultiOverride(size: Int?)

  public fun __minimize() {
  }
}

@MultiOverrideDSL
public interface IntermediateBaseQualification {
  public
      fun __onIntermediateMultiOverride(__projection: IntermediateMultiOverrideProjection.() -> Unit)
}

@MultiOverrideDSL
public interface IntermediateBaseQualifiedProjection : IntermediateBaseProjection,
    IntermediateBaseQualification
