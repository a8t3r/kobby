@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlAdapter
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyMutationDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyQueryDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlMutationException
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlMutationResult
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlQueryException
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlQueryResult
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.graphql.GraphqlRequest
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.collections.Map
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.let
import kotlin.takeIf

public open class GraphqlSimpleKtorAdapter(
  protected val client: HttpClient,
  protected val url: String? = null,
  protected val headers: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val listener: (GraphqlRequest) -> Unit = {},
) : GraphqlAdapter {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>): MyQueryDto {
    val request = GraphqlRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<GraphqlRequest>(request)
      contentType(ContentType.Application.Json)
      this@GraphqlSimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<GraphqlQueryResult>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GraphqlQueryException(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GraphqlQueryException(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>): MyMutationDto {
    val request = GraphqlRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<GraphqlRequest>(request)
      contentType(ContentType.Application.Json)
      this@GraphqlSimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<GraphqlMutationResult>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GraphqlMutationException(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GraphqlMutationException(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }
}
