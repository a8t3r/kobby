@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleDSL
import kotlin.Int
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

/**
 *  Query type
 */
public interface Query {
  /**
   *  find all
   */
  public val all: List<List<List<Simple>?>>?

  public fun __context(): SimpleContext

  public fun QueryProjection.__withCurrentProjection()
}

/**
 *  Query type
 */
@SimpleDSL
public interface QueryProjection {
  /**
   *  find all
   *
   * @param limit  limit result list
   */
  public fun all(limit: Int? = null, __projection: SimpleProjection.() -> Unit)

  public fun __minimize() {
  }
}
