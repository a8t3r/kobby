@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.im

import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import my.root.ctx.PrefCtxContextPostCtx
import my.root.dto1.DPrefActorDPost
import my.root.dto1.DPrefFilmDPost
import my.root.dto1.DPrefNativeDPost
import my.root.en.PrePrActorPostPr
import my.root.en.PrePrFilmPostPr
import my.root.en.PreQPNativePostQP
import my.root.en.PrefEnNativePostEn

public open class PreImPreQPNativePostQPPostIm : PreQPNativePostQP {
  public val _innerOnPrFilmOnPoPin: PreImPrePrFilmPostPrPostIm = PreImPrePrFilmPostPrPostIm()

  public val _innerOnPrActorOnPoPin: PreImPrePrActorPostPrPostIm = PreImPrePrActorPostPrPostIm()

  public override fun onPrFilmOnPo(projection: PrePrFilmPostPr.() -> Unit): Unit {
    PreImPrePrFilmPostPrPostIm().apply(projection)._innerRepeatProjectionPin(setOf(), _innerOnPrFilmOnPoPin)
  }

  public override fun onPrActorOnPo(projection: PrePrActorPostPr.() -> Unit): Unit {
    PreImPrePrActorPostPrPostIm().apply(projection)._innerRepeatProjectionPin(setOf(), _innerOnPrActorOnPoPin)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatProjectionPin(ignore: Set<String>, projection: PreQPNativePostQP): Unit {
    projection.onPrFilmOnPo {
      this@PreImPreQPNativePostQPPostIm._innerOnPrFilmOnPoPin._innerRepeatProjectionPin(setOf(), this)
    }
    projection.onPrActorOnPo {
      this@PreImPreQPNativePostQPPostIm._innerOnPrActorOnPoPin._innerRepeatProjectionPin(setOf(), this)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerBuildPin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Film
    subBody.clear()
    _innerOnPrFilmOnPoPin._innerBuildPin(setOf(), header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Film").append(subBody)
    }

    // Qualification of: Actor
    subBody.clear()
    _innerOnPrActorOnPoPin._innerBuildPin(setOf(), header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Actor").append(subBody)
    }

    body.append(' ').append('}')
  }
}

public fun DPrefNativeDPost.buildEntity(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPreQPNativePostQPPostIm): PrefEnNativePostEn = when(this) {
  is DPrefFilmDPost -> PreImFilmPostIm(innerContextPin, innerProjectionPin._innerOnPrFilmOnPoPin, this)
  is DPrefActorDPost -> PreImActorPostIm(innerContextPin, innerProjectionPin._innerOnPrActorOnPoPin, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
