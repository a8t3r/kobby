@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.dto1.gr_ql

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonIgnoreProperties
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonSubTypes
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = GPrefClientMessageConnectionInitGPost::class, name = "connection_init"),
  JsonSubTypes.Type(value = GPrefClientMessagePingGPost::class, name = "ping"),
  JsonSubTypes.Type(value = GPrefClientMessagePongGPost::class, name = "pong"),
  JsonSubTypes.Type(value = GPrefClientMessageSubscribeGPost::class, name = "subscribe"),
  JsonSubTypes.Type(value = GPrefClientMessageCompleteGPost::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class GPrefClientMessageGPost

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = GPrefServerMessageConnectionAckGPost::class, name = "connection_ack"),
  JsonSubTypes.Type(value = GPrefServerMessagePingGPost::class, name = "ping"),
  JsonSubTypes.Type(value = GPrefServerMessagePongGPost::class, name = "pong"),
  JsonSubTypes.Type(value = GPrefServerMessageNextGPost::class, name = "next"),
  JsonSubTypes.Type(value = GPrefServerMessageErrorGPost::class, name = "error"),
  JsonSubTypes.Type(value = GPrefServerMessageCompleteGPost::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class GPrefServerMessageGPost

/**
 * See ConnectionInit [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_init")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefClientMessageConnectionInitGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefClientMessageConnectionInitGPost @JsonCreator constructor(
  public val payload: Map<String, Any?>? = null,
) : GPrefClientMessageGPost()

/**
 * See ConnectionAck [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_ack")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessageConnectionAckGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessageConnectionAckGPost @JsonCreator constructor(
  public val payload: Any? = null,
) : GPrefServerMessageGPost()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefClientMessagePingGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefClientMessagePingGPost @JsonCreator constructor(
  public val payload: Any? = null,
) : GPrefClientMessageGPost()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefClientMessagePongGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefClientMessagePongGPost @JsonCreator constructor(
  public val payload: Any? = null,
) : GPrefClientMessageGPost()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessagePingGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessagePingGPost @JsonCreator constructor(
  public val payload: Any? = null,
) : GPrefServerMessageGPost()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessagePongGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessagePongGPost @JsonCreator constructor(
  public val payload: Any? = null,
) : GPrefServerMessageGPost()

/**
 * See Subscribe [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "subscribe")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefClientMessageSubscribeGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefClientMessageSubscribeGPost(
  public val id: String,
  public val payload: GPrefRequestGPost,
) : GPrefClientMessageGPost()

/**
 * See Next [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "next")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessageNextGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessageNextGPost(
  public val id: String,
  public val payload: GPrefSubscriptionResultGPost,
) : GPrefServerMessageGPost()

/**
 * See Error [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "error")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessageErrorGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessageErrorGPost(
  public val id: String,
  @JsonInclude(value = JsonInclude.Include.NON_EMPTY)
  public val payload: List<GPrefErrorGPost>? = null,
) : GPrefServerMessageGPost()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefClientMessageCompleteGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefClientMessageCompleteGPost @JsonCreator constructor(
  public val id: String,
) : GPrefClientMessageGPost()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = GPrefServerMessageCompleteGPost::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class GPrefServerMessageCompleteGPost @JsonCreator constructor(
  public val id: String,
) : GPrefServerMessageGPost()
