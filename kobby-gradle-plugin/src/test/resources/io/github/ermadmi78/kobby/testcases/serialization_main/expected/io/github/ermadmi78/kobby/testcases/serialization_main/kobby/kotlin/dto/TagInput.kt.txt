@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.CinemaDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error
import kotlin.let
import kotlinx.serialization.Serializable

/**
 * Input TagInput is introduced for testing inputs with single value.
 * See class TagInput.
 */
@Serializable
public data class TagInput(
  /**
   * The tag value
   */
  public val `value`: String,
)

public fun TagInput(block: TagInputBuilder.() -> Unit): TagInput {
  // TagInput builder DSL
  return TagInputBuilder().apply(block).let {
    TagInput(
          it.`value` ?: error("TagInput: 'value' must not be null")
        )
  }
}

public fun TagInput.copy(block: TagInputBuilder.() -> Unit): TagInput {
  // TagInput copy DSL
  return TagInputBuilder().also {
    it.`value` = this.`value`
  }
  .apply(block).let {
    TagInput(
          it.`value` ?: error("TagInput: 'value' must not be null")
        )
  }
}

/**
 * Input TagInput is introduced for testing inputs with single value.
 * See class TagInput.
 */
@CinemaDSL
public class TagInputBuilder {
  /**
   * The tag value
   */
  public var `value`: String? = null
}
