@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.mutable_cinema_serialization.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.mutable_cinema_serialization.kobby.kotlin.CinemaDSL
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.serializer.LocalDateSerializer
import java.time.LocalDate
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.text.buildString
import kotlinx.serialization.Serializable

/**
 * Actor input data
 */
@Serializable
@CinemaDSL
public class ActorInput {
  /**
   * First name of actor.
   */
  public var firstName: String? = null

  /**
   * Surname of the actor.
   * This field is nullable because the actor can use an alias and not have a last name.
   */
  public var lastName: String? = null

  /**
   * Actor's birthday
   */
  public var birthday: @Serializable(with = LocalDateSerializer::class) LocalDate? = null

  /**
   * Actor's gender
   */
  public var gender: Gender? = null

  override fun toString(): String = buildString {
    append("ActorInput").append('(')
    append("firstName").append('=').append(firstName)
    append(", ").append("lastName").append('=').append(lastName)
    append(", ").append("birthday").append('=').append(birthday)
    append(", ").append("gender").append('=').append(gender)
    append(')')
  }
}

public fun ActorInput(block: ActorInput.() -> Unit): ActorInput = ActorInput().apply(block)

public fun ActorInput.copy(): ActorInput = ActorInput().also {
  it.firstName = this.firstName
  it.lastName = this.lastName
  it.birthday = this.birthday
  it.gender = this.gender
}

public fun ActorInput.copy(block: ActorInput.() -> Unit): ActorInput = copy().apply(block)
