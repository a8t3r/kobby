@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.CountryDSL
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "Country")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = CountryDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryDto(
  public val id: Long? = null,
  public val name: String? = null,
)

public fun CountryDto.toBuilder(): CountryDtoBuilder = CountryDtoBuilder().also {
  it.id = this.id
  it.name = this.name
}

public fun CountryDtoBuilder.toDto(): CountryDto = CountryDto(
  id,
  name
)

public fun CountryDto(block: CountryDtoBuilder.() -> Unit): CountryDto =
    CountryDtoBuilder().apply(block).toDto()

public fun CountryDto.copy(block: CountryDtoBuilder.() -> Unit): CountryDto =
    toBuilder().apply(block).toDto()

@CountryDSL
public class CountryDtoBuilder {
  public var id: Long? = null

  public var name: String? = null
}
