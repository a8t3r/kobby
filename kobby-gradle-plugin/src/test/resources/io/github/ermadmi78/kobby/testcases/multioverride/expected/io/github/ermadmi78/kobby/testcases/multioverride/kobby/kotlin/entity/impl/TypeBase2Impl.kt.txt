@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.dto.TypeBase2Dto
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.dto.TypeMultiOverrideDto
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity.TypeBase2
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity.TypeBase2QualifiedProjection
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity.TypeMultiOverrideProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.collections.Set
import kotlin.collections.mutableSetOf
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.isNotEmpty

internal open class TypeBase2QualifiedProjectionImpl : TypeBase2QualifiedProjection {
  internal val ___innerIgnore: MutableSet<String> = mutableSetOf()

  internal var __innerNoOverride20: Boolean = false

  internal var __innerNoOverride20Size: Int? = null

  internal var __innerTypeMultiOverride1: Boolean = false

  internal var __innerTypeMultiOverride1Size: Int? = null

  internal val ___inner__onTypeMultiOverride: TypeMultiOverrideProjectionImpl =
      TypeMultiOverrideProjectionImpl()

  public override fun noOverride2(size: Int?): Unit {
    __innerNoOverride20 = true
    __innerNoOverride20Size = size

    ___inner__onTypeMultiOverride.__innerNoOverride21 = __innerNoOverride20
    ___inner__onTypeMultiOverride.__innerNoOverride21Size = size

    ___innerIgnore += "noOverride2"
  }

  public override fun typeMultiOverride(size: Int?): Unit {
    __innerTypeMultiOverride1 = true
    __innerTypeMultiOverride1Size = size

    ___inner__onTypeMultiOverride.__innerTypeMultiOverride2 = __innerTypeMultiOverride1
    ___inner__onTypeMultiOverride.__innerTypeMultiOverride2Size = size

    ___innerIgnore += "typeMultiOverride"
  }

  public override fun __onTypeMultiOverride(__projection: TypeMultiOverrideProjection.() -> Unit):
      Unit {
    TypeMultiOverrideProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onTypeMultiOverride)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: TypeBase2QualifiedProjection): Unit {
    if ("noOverride2" !in ignore && __innerNoOverride20) {
      __projection.noOverride2(__innerNoOverride20Size)
    }
    if ("typeMultiOverride" !in ignore && __innerTypeMultiOverride1) {
      __projection.typeMultiOverride(__innerTypeMultiOverride1Size)
    }
    __projection.__onTypeMultiOverride {
      this@TypeBase2QualifiedProjectionImpl.___inner__onTypeMultiOverride.___innerRepeatProjection(setOf(), this)
    }
  }

  /**
   * Projection for field: noOverride2
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildNoOverride20(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("noOverride2" !in ignore && __innerNoOverride20) {
      body.append(' ').append("noOverride2")
      var counter = 0
      val addBrackets = __innerNoOverride20Size != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: noOverride2.size
      if (__innerNoOverride20Size != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerNoOverride20Size!!
        body.append("size").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: typeMultiOverride
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildTypeMultiOverride1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("typeMultiOverride" !in ignore && __innerTypeMultiOverride1) {
      body.append(' ').append("typeMultiOverride")
      var counter = 0
      val addBrackets = __innerTypeMultiOverride1Size != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: typeMultiOverride.size
      if (__innerTypeMultiOverride1Size != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerTypeMultiOverride1Size!!
        body.append("size").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: noOverride2
    ____innerBuildNoOverride20(ignore, header, body, arguments)

    // Field: typeMultiOverride
    ____innerBuildTypeMultiOverride1(ignore, header, body, arguments)

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: TypeMultiOverride
    subBody.clear()
    ___inner__onTypeMultiOverride.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("TypeMultiOverride").append(subBody)
    }

    body.append(' ').append('}')
  }
}

internal fun TypeBase2Dto.buildEntity(__innerContext: MultiOverrideContext,
    __innerProjection: TypeBase2QualifiedProjectionImpl): TypeBase2 = when(this) {
  is TypeMultiOverrideDto -> TypeMultiOverrideImpl(__innerContext, __innerProjection.___inner__onTypeMultiOverride, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
