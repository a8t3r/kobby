@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "SeveralPrimaryKeys")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = SeveralPrimaryKeysDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class SeveralPrimaryKeysDto(
  public val `if`: Long? = null,
  public val `do`: String? = null,
  public val `while`: Int? = null,
  public val it: String? = null,
  public val other: String? = null,
  public val result: Int? = null,
  public val block: String? = null,
) {
  public override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as SeveralPrimaryKeysDto

    if (this.`if` != other.`if`) {
      return false
    }
    if (this.`do` != other.`do`) {
      return false
    }
    if (this.`while` != other.`while`) {
      return false
    }
    if (this.it != other.it) {
      return false
    }
    if (this.other != other.other) {
      return false
    }
    if (this.result != other.result) {
      return false
    }
    if (this.block != other.block) {
      return false
    }

    return true
  }

  public override fun hashCode(): Int {
    var result = this.`if`?.hashCode() ?: 0
    result = 31 * result + (this.`do`?.hashCode() ?: 0)
    result = 31 * result + (this.`while`?.hashCode() ?: 0)
    result = 31 * result + (this.it?.hashCode() ?: 0)
    result = 31 * result + (this.other?.hashCode() ?: 0)
    result = 31 * result + (this.result?.hashCode() ?: 0)
    result = 31 * result + (this.block?.hashCode() ?: 0)
    return result
  }
}

public fun SeveralPrimaryKeysDto.toBuilder(): SeveralPrimaryKeysDtoBuilder =
    SeveralPrimaryKeysDtoBuilder().also {
  it.`if` = this.`if`
  it.`do` = this.`do`
  it.`while` = this.`while`
  it.it = this.it
  it.other = this.other
  it.result = this.result
  it.block = this.block
}

public fun SeveralPrimaryKeysDtoBuilder.toDto(): SeveralPrimaryKeysDto = SeveralPrimaryKeysDto(
  `if`,
  `do`,
  `while`,
  it,
  other,
  result,
  block
)

public fun SeveralPrimaryKeysDto(block: SeveralPrimaryKeysDtoBuilder.() -> Unit):
    SeveralPrimaryKeysDto = SeveralPrimaryKeysDtoBuilder().apply(block).toDto()

public fun SeveralPrimaryKeysDto.copy(block: SeveralPrimaryKeysDtoBuilder.() -> Unit):
    SeveralPrimaryKeysDto = toBuilder().apply(block).toDto()

@EscapeDSL
public class SeveralPrimaryKeysDtoBuilder {
  public var `if`: Long? = null

  public var `do`: String? = null

  public var `while`: Int? = null

  public var it: String? = null

  public var other: String? = null

  public var result: Int? = null

  public var block: String? = null
}
