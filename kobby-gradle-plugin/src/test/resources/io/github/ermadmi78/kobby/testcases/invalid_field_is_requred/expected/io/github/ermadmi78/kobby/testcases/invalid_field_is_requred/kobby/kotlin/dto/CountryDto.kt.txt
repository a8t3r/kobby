@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.invalid_field_is_requred.kobby.kotlin.InvalidFieldIsRequredDSL
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

public data class CountryDto(
  public override val id: Long? = null,
  public override val name: String? = null,
  public override val description: String? = null,
) : BaseDto

public fun CountryDto.toBuilder(): CountryDtoBuilder = CountryDtoBuilder().also {
  it.id = this.id
  it.name = this.name
  it.description = this.description
}

public fun CountryDtoBuilder.toDto(): CountryDto = CountryDto(
  id,
  name,
  description
)

public fun CountryDto(block: CountryDtoBuilder.() -> Unit): CountryDto =
    CountryDtoBuilder().apply(block).toDto()

public fun CountryDto.copy(block: CountryDtoBuilder.() -> Unit): CountryDto =
    toBuilder().apply(block).toDto()

@InvalidFieldIsRequredDSL
public class CountryDtoBuilder {
  public var id: Long? = null

  public var name: String? = null

  public var description: String? = null
}
