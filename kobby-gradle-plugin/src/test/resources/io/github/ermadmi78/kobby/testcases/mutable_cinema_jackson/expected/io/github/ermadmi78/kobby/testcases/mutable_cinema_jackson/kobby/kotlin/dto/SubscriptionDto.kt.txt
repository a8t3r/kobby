@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.mutable_cinema_jackson.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.mutable_cinema_jackson.kobby.kotlin.CinemaDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.text.buildString

@JsonTypeName(value = "Subscription")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = SubscriptionDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
@CinemaDSL
public class SubscriptionDto {
  /**
   * Listen new countries
   */
  public var countryCreated: CountryDto? = null

  /**
   * Listen new films
   */
  public var filmCreated: FilmDto? = null

  /**
   * Listen new actors
   */
  public var actorCreated: ActorDto? = null

  override fun toString(): String = buildString {
    append("SubscriptionDto").append('(')
    append("countryCreated").append('=').append(countryCreated)
    append(", ").append("filmCreated").append('=').append(filmCreated)
    append(", ").append("actorCreated").append('=').append(actorCreated)
    append(')')
  }
}

public fun SubscriptionDto(block: SubscriptionDto.() -> Unit): SubscriptionDto =
    SubscriptionDto().apply(block)

public fun SubscriptionDto.copy(): SubscriptionDto = SubscriptionDto().also {
  it.countryCreated = this.countryCreated
  it.filmCreated = this.filmCreated
  it.actorCreated = this.actorCreated
}

public fun SubscriptionDto.copy(block: SubscriptionDto.() -> Unit): SubscriptionDto =
    copy().apply(block)
