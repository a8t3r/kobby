@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.im

import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.collections.Set
import kotlin.collections.mutableSetOf
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.isNotEmpty
import my.root.ctx.PrefCtxContextPostCtx
import my.root.dto1.DPrefActorDPost
import my.root.dto1.DPrefCountryDPost
import my.root.dto1.DPrefEntityDPost
import my.root.dto1.DPrefFilmDPost
import my.root.en.PrePrActorPostPr
import my.root.en.PrePrCountryPostPr
import my.root.en.PrePrFilmPostPr
import my.root.en.PreQPEntityPostQP
import my.root.en.PreSelEntityFieldsPostSel
import my.root.en.PrefEnEntityPostEn

public open class PreImPreQPEntityPostQPPostIm : PreQPEntityPostQP {
  public val _innerIgnorePin: MutableSet<String> = mutableSetOf("id")

  public var innerFields1Pin: PreImPreSelEntityFieldsPostSelPostIm? = null

  public val _innerOnPrCountryOnPoPin: PreImPrePrCountryPostPrPostIm =
      PreImPrePrCountryPostPrPostIm()

  public val _innerOnPrFilmOnPoPin: PreImPrePrFilmPostPrPostIm = PreImPrePrFilmPostPrPostIm()

  public val _innerOnPrActorOnPoPin: PreImPrePrActorPostPrPostIm = PreImPrePrActorPostPrPostIm()

  public override fun withPrFieldsWithPo(selection: PreSelEntityFieldsPostSel.() -> Unit): Unit {
    innerFields1Pin = PreImPreSelEntityFieldsPostSelPostIm().apply(selection)

    _innerOnPrCountryOnPoPin.innerFields1Pin = innerFields1Pin

    _innerOnPrFilmOnPoPin.innerFields1Pin = innerFields1Pin

    _innerOnPrActorOnPoPin.innerFields1Pin = innerFields1Pin

    _innerIgnorePin += "fields"
  }

  public override fun onPrCountryOnPo(projection: PrePrCountryPostPr.() -> Unit): Unit {
    PreImPrePrCountryPostPrPostIm().apply(projection)._innerRepeatProjectionPin(_innerIgnorePin, _innerOnPrCountryOnPoPin)
  }

  public override fun onPrFilmOnPo(projection: PrePrFilmPostPr.() -> Unit): Unit {
    PreImPrePrFilmPostPrPostIm().apply(projection)._innerRepeatProjectionPin(_innerIgnorePin, _innerOnPrFilmOnPoPin)
  }

  public override fun onPrActorOnPo(projection: PrePrActorPostPr.() -> Unit): Unit {
    PreImPrePrActorPostPrPostIm().apply(projection)._innerRepeatProjectionPin(_innerIgnorePin, _innerOnPrActorOnPoPin)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatProjectionPin(ignore: Set<String>, projection: PreQPEntityPostQP): Unit {
    if ("fields" !in ignore && innerFields1Pin != null) {
      projection.withPrFieldsWithPo {
        this@PreImPreQPEntityPostQPPostIm.innerFields1Pin!!._innerRepeatSelectionPin(this)
      }
    }
    projection.onPrCountryOnPo {
      this@PreImPreQPEntityPostQPPostIm._innerOnPrCountryOnPoPin._innerRepeatProjectionPin(setOf(), this)
    }
    projection.onPrFilmOnPo {
      this@PreImPreQPEntityPostQPPostIm._innerOnPrFilmOnPoPin._innerRepeatProjectionPin(setOf(), this)
    }
    projection.onPrActorOnPo {
      this@PreImPreQPEntityPostQPPostIm._innerOnPrActorOnPoPin._innerRepeatProjectionPin(setOf(), this)
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildFields1Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("fields" !in ignore && innerFields1Pin != null) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = innerFields1Pin!!.keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (innerFields1Pin!!.keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFields1Pin!!.keys!!
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerBuildPin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    __innerBuildFields1Pin(ignore, header, body, arguments)

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Country
    subBody.clear()
    _innerOnPrCountryOnPoPin._innerBuildPin(_innerIgnorePin, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Country").append(subBody)
    }

    // Qualification of: Film
    subBody.clear()
    _innerOnPrFilmOnPoPin._innerBuildPin(_innerIgnorePin, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Film").append(subBody)
    }

    // Qualification of: Actor
    subBody.clear()
    _innerOnPrActorOnPoPin._innerBuildPin(_innerIgnorePin, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Actor").append(subBody)
    }

    body.append(' ').append('}')
  }
}

public class PreImPreSelEntityFieldsPostSelPostIm : PreSelEntityFieldsPostSel {
  public override var keys: List<String>? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatSelectionPin(selection: PreSelEntityFieldsPostSel): Unit {
    selection.keys = keys
  }
}

public fun DPrefEntityDPost.buildEntity(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPreQPEntityPostQPPostIm): PrefEnEntityPostEn = when(this) {
  is DPrefCountryDPost -> PreImCountryPostIm(innerContextPin, innerProjectionPin._innerOnPrCountryOnPoPin, this)
  is DPrefFilmDPost -> PreImFilmPostIm(innerContextPin, innerProjectionPin._innerOnPrFilmOnPoPin, this)
  is DPrefActorDPost -> PreImActorPostIm(innerContextPin, innerProjectionPin._innerOnPrActorOnPoPin, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
