@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "Subscription")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = SubscriptionDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class SubscriptionDto @JsonCreator constructor(
  public val `by`: EscapeDto? = null,
)

public fun SubscriptionDto.toBuilder(): SubscriptionDtoBuilder = SubscriptionDtoBuilder().also {
  it.`by` = this.`by`
}

public fun SubscriptionDtoBuilder.toDto(): SubscriptionDto = SubscriptionDto(
  `by`
)

public fun SubscriptionDto(block: SubscriptionDtoBuilder.() -> Unit): SubscriptionDto =
    SubscriptionDtoBuilder().apply(block).toDto()

public fun SubscriptionDto.copy(block: SubscriptionDtoBuilder.() -> Unit): SubscriptionDto =
    toBuilder().apply(block).toDto()

@EscapeDSL
public class SubscriptionDtoBuilder {
  public var `by`: EscapeDto? = null
}
