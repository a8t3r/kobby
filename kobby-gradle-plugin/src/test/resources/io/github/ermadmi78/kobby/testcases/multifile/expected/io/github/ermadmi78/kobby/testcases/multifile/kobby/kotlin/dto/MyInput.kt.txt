@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlDSL
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error

@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class MyInput(
  public val id: Long,
  public val name: String? = null,
)

public fun MyInput.toBuilder(): MyInputBuilder = MyInputBuilder().also {
  it.id = this.id
  it.name = this.name
}

public fun MyInputBuilder.toInput(): MyInput = MyInput(
  id ?: error("MyInput: 'id' must not be null"),
  name
)

public fun MyInput(block: MyInputBuilder.() -> Unit): MyInput =
    MyInputBuilder().apply(block).toInput()

public fun MyInput.copy(block: MyInputBuilder.() -> Unit): MyInput =
    toBuilder().apply(block).toInput()

@GraphqlDSL
public class MyInputBuilder {
  public var id: Long? = null

  public var name: String? = null
}
