@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Simple
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.SimpleProjection
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class QueryImpl(
  internal val __innerContext: SimpleContext,
  internal val __innerProjection: QueryProjectionImpl,
  internal val __innerDto: QueryDto,
) : Query {
  override val all: List<List<List<Simple>?>>? by lazy {
    if (__innerProjection.__innerAll0 == null) {
      error("Property [all] is not available - add [all] projection to switch on it")
    }
    __innerDto.resolveAll(__innerContext, __innerProjection.__innerAll0!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Query").append('(')

    var counter = 0

    if (__innerProjection.__innerAll0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("all").append('=').append(all)
    }

    append(')')
  }

  override fun __context(): SimpleContext = __innerContext

  override fun QueryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class QueryProjectionImpl : QueryProjection {
  internal var __innerAll0: SimpleProjectionImpl? = null

  internal var __innerAll0Limit: Int? = null

  override fun all(limit: Int?, __projection: SimpleProjection.() -> Unit) {
    __innerAll0 = SimpleProjectionImpl().apply(__projection)
    __innerAll0Limit = limit
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: QueryProjection) {
    if ("all" !in ignore && __innerAll0 != null) {
      __projection.all(__innerAll0Limit) {
        this@QueryProjectionImpl.__innerAll0!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: all
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildAll0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("all" !in ignore && __innerAll0 != null) {
      body.append(' ').append("all")
      var counter = 0
      val addBrackets = __innerAll0Limit != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: all.limit
      if (__innerAll0Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerAll0Limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Simple
      __innerAll0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: all
    ____innerBuildAll0(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun QueryDto.buildEntity(__innerContext: SimpleContext,
    __innerProjection: QueryProjectionImpl): Query =
    QueryImpl(__innerContext, __innerProjection, this)

internal fun QueryDto.resolveAll(__innerContext: SimpleContext,
    __innerProjection: SimpleProjectionImpl): List<List<List<Simple>?>>? =
    all?.map { it.map { it?.map { it.buildEntity(__innerContext, __innerProjection) } } }
