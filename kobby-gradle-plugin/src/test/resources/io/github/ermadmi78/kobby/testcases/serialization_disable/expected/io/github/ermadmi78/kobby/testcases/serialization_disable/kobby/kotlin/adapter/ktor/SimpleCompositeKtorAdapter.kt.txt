@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleAdapter
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleMapper
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleReceiver
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleClientMessage
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleException
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageComplete
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageConnectionError
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageConnectionKeepAlive
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageConnectionTerminate
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageData
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageError
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageStart
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMessageStop
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleMutationResult
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleQueryResult
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleRequest
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.graphql.SimpleServerMessage
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeout

public open class SimpleCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: SimpleMapper,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> Map<String, Any?>? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = null,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (SimpleRequest) -> Unit = {},
) : SimpleAdapter {
  public override suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto {
    val request = SimpleRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, SimpleQueryResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw SimpleException("GraphQL query failed", request, it)
    }
    return result.data ?: throw SimpleException(
          "GraphQL query completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      MutationDto {
    val request = SimpleRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, SimpleMutationResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw SimpleException("GraphQL mutation failed", request, it)
    }
    return result.data ?: throw SimpleException(
          "GraphQL mutation completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend SimpleReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: Map<String, Any?>? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = SimpleRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: SimpleRequest,
    block: suspend SimpleReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    sendMessage(SimpleMessageConnectionInit(initPayload))
    try {
      while (true) {
        when (val reply = receiveMessage()) {
          is SimpleMessageConnectionKeepAlive -> {
            continue
          }
          is SimpleMessageConnectionAck -> {
            break
          }
          is SimpleMessageConnectionError -> {
            throw SimpleException("""Connection error: ${reply.payload}""", request)
          }
          else -> {
            throw SimpleException("""Invalid protocol - unexpected reply: $reply""", request)
          }
        }
      }

      val subscriptionId = idGenerator()
      sendMessage(SimpleMessageStart(subscriptionId, request))

      try {
        block.invoke(object : SimpleReceiver<SubscriptionDto> {
          public override suspend fun receive(): SubscriptionDto {
            while (true) {
              when (val reply = receiveMessage()) {
                is SimpleMessageData -> {
                  require(reply.id == subscriptionId)

                  val result = reply.payload
                  result.errors?.takeIf { it.isNotEmpty() }?.let {
                    throw SimpleException("GraphQL subscription failed", request, it)
                  }
                  return result.data ?: throw SimpleException(
                        "GraphQL subscription completes successfully but returns no data",
                        request
                      )
                }
                is SimpleMessageError -> {
                  require(reply.id == subscriptionId)
                  throw SimpleException("Subscription failed", request, reply.payload.errors)
                }
                is SimpleMessageComplete -> {
                  require(reply.id == subscriptionId)
                  throw CancellationException("Subscription finished")
                }
                is SimpleMessageConnectionKeepAlive -> {
                  continue
                }
                else -> {
                  throw SimpleException("""Invalid protocol - unexpected reply: $reply""", request)
                }
              }
            }

            @Suppress("UNREACHABLE_CODE")
            error("Invalid algorithm")
          }
        })
      }
      finally {
        sendMessage(SimpleMessageStop(subscriptionId))
      }
    }
    finally {
      sendMessage(SimpleMessageConnectionTerminate())
    }
  }

  protected open suspend fun WebSocketSession.sendMessage(message: SimpleClientMessage): Unit {
    val content = mapper.serialize(message)
    send(content)
  }

  protected open suspend fun WebSocketSession.receiveMessage(): SimpleServerMessage {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      incoming.receive()
    }
    else {
      withTimeout(subscriptionReceiveTimeoutMillis) {
        incoming.receive()
      }
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, SimpleServerMessage::class)
  }
}
