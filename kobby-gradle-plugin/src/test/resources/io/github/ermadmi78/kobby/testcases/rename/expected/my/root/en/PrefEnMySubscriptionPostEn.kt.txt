@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.en

import kotlin.Long
import kotlin.Suppress
import kotlin.Unit
import my.root.ctx.PrefCtxContextPostCtx
import my.root.ctx.PrefCtxDSLPostCtx

public interface PrefEnMySubscriptionPostEn {
  public val countryCreated: PrefEnCountryPostEn

  public val filmCreated: PrefEnFilmPostEn

  public val actorCreated: PrefEnActorPostEn

  public fun context(): PrefCtxContextPostCtx

  public fun PrePrMySubscriptionPostPr.withCurrentProjection()
}

@PrefCtxDSLPostCtx
public interface PrePrMySubscriptionPostPr {
  public fun withPrCountryCreatedWithPo(projection: PrePrCountryPostPr.() -> Unit = {})

  public fun withPrFilmCreatedWithPo(countryId: Long? = null, projection: PrePrFilmPostPr.() -> Unit
      = {})

  public fun withPrActorCreatedWithPo(countryId: Long? = null,
      projection: PrePrActorPostPr.() -> Unit = {})

  public fun minimize() {
  }
}
