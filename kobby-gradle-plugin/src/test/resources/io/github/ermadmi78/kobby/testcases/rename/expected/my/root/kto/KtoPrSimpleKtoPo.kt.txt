@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.kto

import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.collections.Map
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.let
import kotlin.takeIf
import my.root.ctx.PrefCtxAdapterPostCtx
import my.root.dto1.DPrefMyMutationDPost
import my.root.dto1.DPrefMyQueryDPost
import my.root.dto1.gr_ql.GPrefMutationExceptionGPost
import my.root.dto1.gr_ql.GPrefMutationResultGPost
import my.root.dto1.gr_ql.GPrefQueryExceptionGPost
import my.root.dto1.gr_ql.GPrefQueryResultGPost
import my.root.dto1.gr_ql.GPrefRequestGPost

public open class KtoPrSimpleKtoPo(
  protected val client: HttpClient,
  protected val url: String? = null,
  protected val headers: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val listener: (GPrefRequestGPost) -> Unit = {},
) : PrefCtxAdapterPostCtx {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>):
      DPrefMyQueryDPost {
    val request = GPrefRequestGPost(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<GPrefRequestGPost>(request)
      contentType(ContentType.Application.Json)
      this@KtoPrSimpleKtoPo.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<GPrefQueryResultGPost>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GPrefQueryExceptionGPost(
            "GraphQL query failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GPrefQueryExceptionGPost(
          "GraphQL query completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      DPrefMyMutationDPost {
    val request = GPrefRequestGPost(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<GPrefRequestGPost>(request)
      contentType(ContentType.Application.Json)
      this@KtoPrSimpleKtoPo.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<GPrefMutationResultGPost>()

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw GPrefMutationExceptionGPost(
            "GraphQL mutation failed",
            request,
            it,
            result.extensions,
            result.data
          )
    }
    return result.data ?: throw GPrefMutationExceptionGPost(
          "GraphQL mutation completes successfully but returns no data",
          request,
          result.errors,
          result.extensions,
          null
        )
  }
}
