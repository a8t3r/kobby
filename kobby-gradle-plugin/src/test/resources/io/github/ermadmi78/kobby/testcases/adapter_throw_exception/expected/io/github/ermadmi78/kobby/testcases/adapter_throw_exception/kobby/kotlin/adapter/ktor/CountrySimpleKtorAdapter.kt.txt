@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.adapter_throw_exception.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.adapter_throw_exception.kobby.kotlin.CountryAdapter
import io.github.ermadmi78.kobby.testcases.adapter_throw_exception.kobby.kotlin.dto.graphql.CountryMutationResult
import io.github.ermadmi78.kobby.testcases.adapter_throw_exception.kobby.kotlin.dto.graphql.CountryQueryResult
import io.github.ermadmi78.kobby.testcases.adapter_throw_exception.kobby.kotlin.dto.graphql.CountryRequest
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.collections.Map
import kotlin.collections.mapOf

public open class CountrySimpleKtorAdapter(
  protected val client: HttpClient,
  protected val url: String? = null,
  protected val headers: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val listener: (CountryRequest) -> Unit = {},
) : CountryAdapter {
  override suspend fun executeQuery(query: String, variables: Map<String, Any?>):
      CountryQueryResult {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<CountryRequest>(request)
      contentType(ContentType.Application.Json)
      this@CountrySimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<CountryQueryResult>()

    return result
  }

  override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      CountryMutationResult {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers()
    val result = client.post {
      setBody<CountryRequest>(request)
      contentType(ContentType.Application.Json)
      this@CountrySimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .body<CountryMutationResult>()

    return result
  }
}
