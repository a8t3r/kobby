@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin

import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.dto.graphql.CountryError
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.dto.graphql.CountryMutationResult
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.dto.graphql.CountryQueryResult
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.dto.graphql.CountrySubscriptionResult
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.SubscriptionProjection
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.`impl`.MutationProjectionImpl
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.`impl`.QueryProjectionImpl
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.`impl`.SubscriptionProjectionImpl
import io.github.ermadmi78.kobby.testcases.adapter_extended_api.kobby.kotlin.entity.`impl`.buildEntity
import kotlin.DslMarker
import kotlin.NotImplementedError
import kotlin.Pair
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.emptyMap
import kotlin.collections.mutableMapOf
import kotlin.collections.setOf
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import kotlin.to
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.modules.SerializersModule

/**
 * Default entry point to work with JSON serialization.
 */
public val countryJson: Json = Json {
  classDiscriminator = "__typename"
  ignoreUnknownKeys = true
  encodeDefaults = false
  prettyPrint = false
  serializersModule = SerializersModule {
  }
}

public fun countryContextOf(adapter: CountryAdapter): CountryContext = CountryContextImpl(adapter)

public fun buildCountryQuery(__projection: QueryProjection.() -> Unit): Pair<String, JsonObject> {
  val projectionRef = QueryProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, JsonElement> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val query = buildString(header.length + body.length + 7) {
    append("query")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return query to JsonObject(arguments)
}

public fun buildCountryMutation(__projection: MutationProjection.() -> Unit):
    Pair<String, JsonObject> {
  val projectionRef = MutationProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, JsonElement> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val mutation = buildString(header.length + body.length + 10) {
    append("mutation")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return mutation to JsonObject(arguments)
}

public fun buildCountrySubscription(__projection: SubscriptionProjection.() -> Unit):
    Pair<String, JsonObject> {
  val projectionRef = SubscriptionProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, JsonElement> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val subscription = buildString(header.length + body.length + 14) {
    append("subscription")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return subscription to JsonObject(arguments)
}

public interface CountryContext {
  public suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public fun subscription(__projection: SubscriptionProjection.() -> Unit):
      CountrySubscriber<Subscription>
}

public fun interface CountrySubscriber<T> {
  public suspend fun subscribe(block: suspend CountryReceiver<T>.() -> Unit)
}

@CountryDSL
public fun interface CountryReceiver<out T> {
  public suspend fun receive(): T
}

public interface CountryResponse {
  /**
   * GraphQL response errors access function generated for adapters with extended API. To enable
   * GraphQL error propagation to the entity layer, set Kobby configuration property
   * `adapter.throwException` to `false`.
   */
  public fun __errors(): List<CountryError>

  /**
   * GraphQL response extensions access function generated for adapters with extended API.
   */
  public fun __extensions(): JsonObject
}

public interface CountryAdapter {
  public suspend fun executeQuery(query: String, variables: JsonObject): CountryQueryResult =
      throw NotImplementedError("Adapter function executeQuery is not implemented")

  public suspend fun executeMutation(query: String, variables: JsonObject): CountryMutationResult =
      throw NotImplementedError("Adapter function executeMutation is not implemented")

  public suspend fun executeSubscription(
    query: String,
    variables: JsonObject,
    block: suspend CountryReceiver<CountrySubscriptionResult>.() -> Unit,
  ): Unit = throw NotImplementedError("Adapter function executeSubscription is not implemented")
}

private class CountryContextImpl(
  private val adapter: CountryAdapter,
) : CountryContext {
  /**
   * https://youtrack.jetbrains.com/issue/KTIJ-844
   */
  @Suppress("BlockingMethodInNonBlockingContext")
  override suspend fun query(__projection: QueryProjection.() -> Unit): Query {
    val projectionRef = QueryProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, JsonElement> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val query = buildString(header.length + body.length + 7) {
      append("query")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    val queryResult: CountryQueryResult = adapter.executeQuery(query, JsonObject(arguments))
    return queryResult.buildEntity(this, projectionRef)
  }

  /**
   * https://youtrack.jetbrains.com/issue/KTIJ-844
   */
  @Suppress("BlockingMethodInNonBlockingContext")
  override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation {
    val projectionRef = MutationProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, JsonElement> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val mutation = buildString(header.length + body.length + 10) {
      append("mutation")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    val mutationResult: CountryMutationResult = adapter.executeMutation(mutation,
        JsonObject(arguments))
    return mutationResult.buildEntity(this, projectionRef)
  }

  override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      CountrySubscriber<Subscription> {
    val projectionRef = SubscriptionProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, JsonElement> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val subscription = buildString(header.length + body.length + 14) {
      append("subscription")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    return CountrySubscriber<Subscription> {
      adapter.executeSubscription(subscription, JsonObject(arguments)) {
        it.invoke(object : CountryReceiver<Subscription> {
          override suspend fun receive(): Subscription {
            val subscriptionResult: CountrySubscriptionResult = this@executeSubscription.receive()
            return subscriptionResult.buildEntity(this@CountryContextImpl, projectionRef)
          }
        })
      }
    }
  }
}

public val countryEmptyJsonObject: JsonObject = JsonObject(emptyMap())

@DslMarker
public annotation class CountryDSL
