@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Actor
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.ActorProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.FilmProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Native
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.NativeQualifiedProjection
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.Taggable
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity.TaggableQualifiedProjection
import java.time.LocalDate
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class CountryImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: CountryProjectionImpl,
  internal val __innerDto: CountryDto,
) : Country {
  override val id: Long
    get() = __innerDto.id!!

  override val fields: Map<String, Any?>
    get() {
      if (!__innerProjection.__innerFields1) {
        error("Property [fields] is not available - add [fields] projection to switch on it")
      }
      return __innerDto.fields!!
    }

  override val name: String
    get() {
      if (!__innerProjection.__innerName2) {
        error("Property [name] is not available - remove [__withoutName] projection to switch on it")
      }
      return __innerDto.name!!
    }

  override val film: Film? by lazy {
    if (__innerProjection.__innerFilm3 == null) {
      error("Property [film] is not available - add [film] projection to switch on it")
    }
    __innerDto.resolveFilm(__innerContext, __innerProjection.__innerFilm3!!)
  }

  override val films: List<Film> by lazy {
    if (__innerProjection.__innerFilms4 == null) {
      error("Property [films] is not available - add [films] projection to switch on it")
    }
    __innerDto.resolveFilms(__innerContext, __innerProjection.__innerFilms4!!)
  }

  override val actor: Actor? by lazy {
    if (__innerProjection.__innerActor5 == null) {
      error("Property [actor] is not available - add [actor] projection to switch on it")
    }
    __innerDto.resolveActor(__innerContext, __innerProjection.__innerActor5!!)
  }

  override val actors: List<Actor> by lazy {
    if (__innerProjection.__innerActors6 == null) {
      error("Property [actors] is not available - add [actors] projection to switch on it")
    }
    __innerDto.resolveActors(__innerContext, __innerProjection.__innerActors6!!)
  }

  override val taggable: List<Taggable> by lazy {
    if (__innerProjection.__innerTaggable7 == null) {
      error("Property [taggable] is not available - add [taggable] projection to switch on it")
    }
    __innerDto.resolveTaggable(__innerContext, __innerProjection.__innerTaggable7!!)
  }

  override val native: List<Native> by lazy {
    if (__innerProjection.__innerNative8 == null) {
      error("Property [native] is not available - add [native] projection to switch on it")
    }
    __innerDto.resolveNative(__innerContext, __innerProjection.__innerNative8!!)
  }

  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as CountryImpl
    return __innerDto.id == other.__innerDto.id
  }

  override fun hashCode(): Int = __innerDto.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Country").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerFields1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("fields").append('=').append(fields)
    }

    if (__innerProjection.__innerName2) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    if (__innerProjection.__innerFilm3 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("film").append('=').append(film)
    }

    if (__innerProjection.__innerFilms4 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("films").append('=').append(films)
    }

    if (__innerProjection.__innerActor5 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actor").append('=').append(actor)
    }

    if (__innerProjection.__innerActors6 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    if (__innerProjection.__innerTaggable7 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("taggable").append('=').append(taggable)
    }

    if (__innerProjection.__innerNative8 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("native").append('=').append(native)
    }

    append(')')
  }

  override fun __context(): CinemaContext = __innerContext

  override fun CountryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class CountryProjectionImpl : CountryProjection {
  internal var __innerFields1: Boolean = false

  internal var __innerFields1Keys: List<String>? = null

  internal var __innerName2: Boolean = true

  internal var __innerFilm3: FilmProjectionImpl? = null

  internal var __innerFilm3Id: Long? = null

  internal var __innerFilms4: FilmProjectionImpl? = null

  internal var __innerFilms4Title: String? = null

  internal var __innerFilms4Genre: Genre? = null

  internal var __innerFilms4Limit: Int? = null

  internal var __innerFilms4Offset: Int? = null

  internal var __innerActor5: ActorProjectionImpl? = null

  internal var __innerActor5Id: Long? = null

  internal var __innerActors6: ActorProjectionImpl? = null

  internal var __innerActors6FirstName: String? = null

  internal var __innerActors6LastName: String? = null

  internal var __innerActors6BirthdayFrom: LocalDate? = null

  internal var __innerActors6BirthdayTo: LocalDate? = null

  internal var __innerActors6Gender: Gender? = null

  internal var __innerActors6Limit: Int? = null

  internal var __innerActors6Offset: Int? = null

  internal var __innerTaggable7: TaggableQualifiedProjectionImpl? = null

  internal var __innerTaggable7Tag: String? = null

  internal var __innerNative8: NativeQualifiedProjectionImpl? = null

  override fun fields(keys: List<String>?) {
    __innerFields1 = true
    __innerFields1Keys = keys
  }

  override fun __withoutName() {
    __innerName2 = false
  }

  override fun film(id: Long, __projection: FilmProjection.() -> Unit) {
    __innerFilm3 = FilmProjectionImpl().apply(__projection)
    __innerFilm3Id = id
  }

  override fun films(
    title: String?,
    genre: Genre?,
    limit: Int?,
    offset: Int?,
    __projection: FilmProjection.() -> Unit,
  ) {
    __innerFilms4 = FilmProjectionImpl().apply(__projection)
    __innerFilms4Title = title
    __innerFilms4Genre = genre
    __innerFilms4Limit = limit
    __innerFilms4Offset = offset
  }

  override fun actor(id: Long, __projection: ActorProjection.() -> Unit) {
    __innerActor5 = ActorProjectionImpl().apply(__projection)
    __innerActor5Id = id
  }

  override fun actors(
    firstName: String?,
    lastName: String?,
    birthdayFrom: LocalDate?,
    birthdayTo: LocalDate?,
    gender: Gender?,
    limit: Int?,
    offset: Int?,
    __projection: ActorProjection.() -> Unit,
  ) {
    __innerActors6 = ActorProjectionImpl().apply(__projection)
    __innerActors6FirstName = firstName
    __innerActors6LastName = lastName
    __innerActors6BirthdayFrom = birthdayFrom
    __innerActors6BirthdayTo = birthdayTo
    __innerActors6Gender = gender
    __innerActors6Limit = limit
    __innerActors6Offset = offset
  }

  override fun taggable(tag: String, __projection: TaggableQualifiedProjection.() -> Unit) {
    __innerTaggable7 = TaggableQualifiedProjectionImpl().apply(__projection)
    __innerTaggable7Tag = tag
  }

  override fun native(__projection: NativeQualifiedProjection.() -> Unit) {
    __innerNative8 = NativeQualifiedProjectionImpl().apply(__projection)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: CountryProjection) {
    if ("fields" !in ignore && __innerFields1) {
      __projection.fields(__innerFields1Keys)
    }
    if ("name" !in ignore && !__innerName2) {
      __projection.__withoutName()
    }
    if ("film" !in ignore && __innerFilm3 != null) {
      __projection.film(__innerFilm3Id!!) {
        this@CountryProjectionImpl.__innerFilm3!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("films" !in ignore && __innerFilms4 != null) {
      __projection.films(__innerFilms4Title, __innerFilms4Genre, __innerFilms4Limit,
          __innerFilms4Offset) {
        this@CountryProjectionImpl.__innerFilms4!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("actor" !in ignore && __innerActor5 != null) {
      __projection.actor(__innerActor5Id!!) {
        this@CountryProjectionImpl.__innerActor5!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("actors" !in ignore && __innerActors6 != null) {
      __projection.actors(__innerActors6FirstName, __innerActors6LastName,
          __innerActors6BirthdayFrom, __innerActors6BirthdayTo, __innerActors6Gender,
          __innerActors6Limit, __innerActors6Offset) {
        this@CountryProjectionImpl.__innerActors6!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("taggable" !in ignore && __innerTaggable7 != null) {
      __projection.taggable(__innerTaggable7Tag!!) {
        this@CountryProjectionImpl.__innerTaggable7!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("native" !in ignore && __innerNative8 != null) {
      __projection.native {
        this@CountryProjectionImpl.__innerNative8!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFields1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("fields" !in ignore && __innerFields1) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = __innerFields1Keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (__innerFields1Keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFields1Keys!!
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: film
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFilm3(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("film" !in ignore && __innerFilm3 != null) {
      body.append(' ').append("film")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: film.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilm3Id!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerFilm3!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: films
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFilms4(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("films" !in ignore && __innerFilms4 != null) {
      body.append(' ').append("films")
      var counter = 0
      val addBrackets = __innerFilms4Title != null || __innerFilms4Genre != null ||
          __innerFilms4Limit != null || __innerFilms4Offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: films.title
      if (__innerFilms4Title != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms4Title!!
        body.append("title").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: films.genre
      if (__innerFilms4Genre != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms4Genre!!
        body.append("genre").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Genre")
      }

      // Argument: films.limit
      if (__innerFilms4Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms4Limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: films.offset
      if (__innerFilms4Offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms4Offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerFilms4!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actor
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActor5(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actor" !in ignore && __innerActor5 != null) {
      body.append(' ').append("actor")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actor.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActor5Id!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActor5!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActors6(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actors" !in ignore && __innerActors6 != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = __innerActors6FirstName != null || __innerActors6LastName != null ||
          __innerActors6BirthdayFrom != null || __innerActors6BirthdayTo != null ||
          __innerActors6Gender != null || __innerActors6Limit != null ||
          __innerActors6Offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (__innerActors6FirstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6FirstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.lastName
      if (__innerActors6LastName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6LastName!!
        body.append("lastName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.birthdayFrom
      if (__innerActors6BirthdayFrom != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6BirthdayFrom!!
        body.append("birthdayFrom").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Date")
      }

      // Argument: actors.birthdayTo
      if (__innerActors6BirthdayTo != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6BirthdayTo!!
        body.append("birthdayTo").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Date")
      }

      // Argument: actors.gender
      if (__innerActors6Gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6Gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (__innerActors6Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6Limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: actors.offset
      if (__innerActors6Offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors6Offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActors6!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: taggable
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildTaggable7(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("taggable" !in ignore && __innerTaggable7 != null) {
      body.append(' ').append("taggable")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: taggable.tag
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerTaggable7Tag!!
        body.append("tag").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Taggable
      __innerTaggable7!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    ____innerBuildFields1(ignore, header, body, arguments)

    // Field: name
    if ("name" !in ignore && __innerName2) {
      body.append(' ').append("name")
    }

    // Field: film
    ____innerBuildFilm3(ignore, header, body, arguments)

    // Field: films
    ____innerBuildFilms4(ignore, header, body, arguments)

    // Field: actor
    ____innerBuildActor5(ignore, header, body, arguments)

    // Field: actors
    ____innerBuildActors6(ignore, header, body, arguments)

    // Field: taggable
    ____innerBuildTaggable7(ignore, header, body, arguments)

    // Field: native
    if ("native" !in ignore && __innerNative8 != null) {
      body.append(' ').append("native")

      // Build nested projection of Native
      __innerNative8!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append('}')
  }
}

internal fun CountryDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country =
    CountryImpl(__innerContext, __innerProjection, this)

internal fun CountryDto.resolveFilm(__innerContext: CinemaContext,
    __innerProjection: FilmProjectionImpl): Film? =
    film?.buildEntity(__innerContext, __innerProjection)

internal fun CountryDto.resolveFilms(__innerContext: CinemaContext,
    __innerProjection: FilmProjectionImpl): List<Film> =
    films?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveActor(__innerContext: CinemaContext,
    __innerProjection: ActorProjectionImpl): Actor? =
    actor?.buildEntity(__innerContext, __innerProjection)

internal fun CountryDto.resolveActors(__innerContext: CinemaContext,
    __innerProjection: ActorProjectionImpl): List<Actor> =
    actors?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveTaggable(__innerContext: CinemaContext,
    __innerProjection: TaggableQualifiedProjectionImpl): List<Taggable> =
    taggable?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveNative(__innerContext: CinemaContext,
    __innerProjection: NativeQualifiedProjectionImpl): List<Native> =
    native?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
