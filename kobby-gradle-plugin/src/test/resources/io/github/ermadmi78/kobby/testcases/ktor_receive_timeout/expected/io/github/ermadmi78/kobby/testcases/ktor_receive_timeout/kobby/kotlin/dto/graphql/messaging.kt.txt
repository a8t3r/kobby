@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.ktor_receive_timeout.kobby.kotlin.dto.graphql

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonIgnoreProperties
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonSubTypes
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = CountryClientMessageConnectionInit::class, name = "connection_init"),
  JsonSubTypes.Type(value = CountryClientMessagePing::class, name = "ping"),
  JsonSubTypes.Type(value = CountryClientMessagePong::class, name = "pong"),
  JsonSubTypes.Type(value = CountryClientMessageSubscribe::class, name = "subscribe"),
  JsonSubTypes.Type(value = CountryClientMessageComplete::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class CountryClientMessage

/**
 * Message protocol description see
 * [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
)
@JsonSubTypes(
  JsonSubTypes.Type(value = CountryServerMessageConnectionAck::class, name = "connection_ack"),
  JsonSubTypes.Type(value = CountryServerMessagePing::class, name = "ping"),
  JsonSubTypes.Type(value = CountryServerMessagePong::class, name = "pong"),
  JsonSubTypes.Type(value = CountryServerMessageNext::class, name = "next"),
  JsonSubTypes.Type(value = CountryServerMessageError::class, name = "error"),
  JsonSubTypes.Type(value = CountryServerMessageComplete::class, name = "complete"),
)
@JsonIgnoreProperties(ignoreUnknown = true)
public sealed class CountryServerMessage

/**
 * See ConnectionInit [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_init")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryClientMessageConnectionInit::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryClientMessageConnectionInit @JsonCreator constructor(
  public val payload: Map<String, Any?>? = null,
) : CountryClientMessage()

/**
 * See ConnectionAck [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "connection_ack")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessageConnectionAck::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessageConnectionAck @JsonCreator constructor(
  public val payload: Any? = null,
) : CountryServerMessage()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryClientMessagePing::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryClientMessagePing @JsonCreator constructor(
  public val payload: Any? = null,
) : CountryClientMessage()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryClientMessagePong::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryClientMessagePong @JsonCreator constructor(
  public val payload: Any? = null,
) : CountryClientMessage()

/**
 * See Ping [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "ping")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessagePing::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessagePing @JsonCreator constructor(
  public val payload: Any? = null,
) : CountryServerMessage()

/**
 * See Pong [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "pong")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessagePong::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessagePong @JsonCreator constructor(
  public val payload: Any? = null,
) : CountryServerMessage()

/**
 * See Subscribe [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "subscribe")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryClientMessageSubscribe::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryClientMessageSubscribe(
  public val id: String,
  public val payload: CountryRequest,
) : CountryClientMessage()

/**
 * See Next [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "next")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessageNext::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessageNext(
  public val id: String,
  public val payload: CountrySubscriptionResult,
) : CountryServerMessage()

/**
 * See Error [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "error")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessageError::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessageError(
  public val id: String,
  @JsonInclude(value = JsonInclude.Include.NON_EMPTY)
  public val payload: List<CountryError>? = null,
) : CountryServerMessage()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryClientMessageComplete::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryClientMessageComplete @JsonCreator constructor(
  public val id: String,
) : CountryClientMessage()

/**
 * See Complete [here](https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md)
 */
@JsonTypeName(value = "complete")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "type",
  defaultImpl = CountryServerMessageComplete::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryServerMessageComplete @JsonCreator constructor(
  public val id: String,
) : CountryServerMessage()
