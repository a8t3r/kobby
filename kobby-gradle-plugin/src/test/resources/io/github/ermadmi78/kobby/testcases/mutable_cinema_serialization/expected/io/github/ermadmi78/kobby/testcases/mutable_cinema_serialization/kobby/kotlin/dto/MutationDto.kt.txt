@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.mutable_cinema_serialization.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.mutable_cinema_serialization.kobby.kotlin.CinemaDSL
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.text.buildString
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
@SerialName("Mutation")
@CinemaDSL
public class MutationDto {
  /**
   * Create country
   */
  public var createCountry: CountryDto? = null

  /**
   * Create film
   */
  public var createFilm: FilmDto? = null

  /**
   * Create actor
   */
  public var createActor: ActorDto? = null

  /**
   * Update birthday of actor
   */
  public var updateBirthday: ActorDto? = null

  /**
   * Associate film with actor
   */
  public var associate: Boolean? = null

  /**
   * Add tag to film.
   * Returns false if the film already had such a tag
   */
  public var tagFilm: Boolean? = null

  /**
   * Add tag to actor.
   * Returns false if the actor already had such a tag
   */
  public var tagActor: Boolean? = null

  public override fun toString(): String = buildString {
    append("MutationDto").append('(')
    append("createCountry").append('=').append(createCountry)
    append(", ").append("createFilm").append('=').append(createFilm)
    append(", ").append("createActor").append('=').append(createActor)
    append(", ").append("updateBirthday").append('=').append(updateBirthday)
    append(", ").append("associate").append('=').append(associate)
    append(", ").append("tagFilm").append('=').append(tagFilm)
    append(", ").append("tagActor").append('=').append(tagActor)
    append(')')
  }
}

public fun MutationDto(block: MutationDto.() -> Unit): MutationDto = MutationDto().apply(block)

public fun MutationDto.copy(): MutationDto = MutationDto().also {
  it.createCountry = this.createCountry
  it.createFilm = this.createFilm
  it.createActor = this.createActor
  it.updateBirthday = this.updateBirthday
  it.associate = this.associate
  it.tagFilm = this.tagFilm
  it.tagActor = this.tagActor
}

public fun MutationDto.copy(block: MutationDto.() -> Unit): MutationDto = copy().apply(block)
