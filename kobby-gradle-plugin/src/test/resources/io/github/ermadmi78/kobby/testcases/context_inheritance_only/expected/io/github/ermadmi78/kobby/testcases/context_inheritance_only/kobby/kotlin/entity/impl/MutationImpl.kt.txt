@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlySubscriber
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.ActorInput
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.FilmInput
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.TagInput
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Actor
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationCreateActorQuery
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationCreateActorSelection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationCreateFilmQuery
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationCreateFilmSelection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.SubscriptionProjection
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class MutationImpl(
  internal val __innerContext: ContextInheritanceOnlyContext,
  internal val __innerProjection: MutationProjectionImpl,
  internal val __innerDto: MutationDto,
) : Mutation {
  public override val createCountry: Country by lazy {
    if (__innerProjection.__innerCreateCountry0 == null) {
      error("Property [createCountry] is not available - add [createCountry] projection to switch on it")
    }
    __innerDto.resolveCreateCountry(__innerContext, __innerProjection.__innerCreateCountry0!!)
  }


  public override val createFilm: Film by lazy {
    if (__innerProjection.__innerCreateFilm1 == null) {
      error("Property [createFilm] is not available - add [createFilm] projection to switch on it")
    }
    __innerDto.resolveCreateFilm(__innerContext, __innerProjection.__innerCreateFilm1!!)
  }


  public override val createActor: Actor by lazy {
    if (__innerProjection.__innerCreateActor2 == null) {
      error("Property [createActor] is not available - add [createActor] projection to switch on it")
    }
    __innerDto.resolveCreateActor(__innerContext, __innerProjection.__innerCreateActor2!!)
  }


  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Mutation").append('(')

    var counter = 0

    if (__innerProjection.__innerCreateCountry0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("createCountry").append('=').append(createCountry)
    }

    if (__innerProjection.__innerCreateFilm1 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("createFilm").append('=').append(createFilm)
    }

    if (__innerProjection.__innerCreateActor2 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("createActor").append('=').append(createActor)
    }

    append(')')
  }

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ContextInheritanceOnlySubscriber<Subscription> = __innerContext.subscription(__projection)

  public override fun MutationProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MutationProjectionImpl : MutationProjection {
  internal var __innerCreateCountry0: CountryProjectionImpl? = null

  internal var __innerCreateCountry0Name: String? = null

  internal var __innerCreateFilm1: MutationCreateFilmQueryImpl? = null

  internal var __innerCreateFilm1CountryId: Long? = null

  internal var __innerCreateFilm1Film: FilmInput? = null

  internal var __innerCreateActor2: MutationCreateActorQueryImpl? = null

  internal var __innerCreateActor2CountryId: Long? = null

  internal var __innerCreateActor2Actor: ActorInput? = null

  public override fun createCountry(name: String, __projection: CountryProjection.() -> Unit):
      Unit {
    __innerCreateCountry0 = CountryProjectionImpl().apply(__projection)
    __innerCreateCountry0Name = name
  }

  public override fun createFilm(
    countryId: Long,
    film: FilmInput,
    __query: MutationCreateFilmQuery.() -> Unit,
  ): Unit {
    __innerCreateFilm1 = MutationCreateFilmQueryImpl().apply(__query)
    __innerCreateFilm1CountryId = countryId
    __innerCreateFilm1Film = film
  }

  public override fun createActor(
    countryId: Long,
    actor: ActorInput,
    __query: MutationCreateActorQuery.() -> Unit,
  ): Unit {
    __innerCreateActor2 = MutationCreateActorQueryImpl().apply(__query)
    __innerCreateActor2CountryId = countryId
    __innerCreateActor2Actor = actor
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: MutationProjection):
      Unit {
    if ("createCountry" !in ignore && __innerCreateCountry0 != null) {
      __projection.createCountry(__innerCreateCountry0Name!!) {
        this@MutationProjectionImpl.__innerCreateCountry0!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("createFilm" !in ignore && __innerCreateFilm1 != null) {
      __projection.createFilm(__innerCreateFilm1CountryId!!, __innerCreateFilm1Film!!) {
        this@MutationProjectionImpl.__innerCreateFilm1!!.___innerRepeatProjection(setOf(), this)
        this@MutationProjectionImpl.__innerCreateFilm1!!.___innerRepeatSelection(this)
      }
    }
    if ("createActor" !in ignore && __innerCreateActor2 != null) {
      __projection.createActor(__innerCreateActor2CountryId!!, __innerCreateActor2Actor!!) {
        this@MutationProjectionImpl.__innerCreateActor2!!.___innerRepeatProjection(setOf(), this)
        this@MutationProjectionImpl.__innerCreateActor2!!.___innerRepeatSelection(this)
      }
    }
  }

  /**
   * Projection for field: createCountry
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCreateCountry0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("createCountry" !in ignore && __innerCreateCountry0 != null) {
      body.append(' ').append("createCountry")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: createCountry.name
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateCountry0Name!!
        body.append("name").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      __innerCreateCountry0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: createFilm
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCreateFilm1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("createFilm" !in ignore && __innerCreateFilm1 != null) {
      body.append(' ').append("createFilm")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: createFilm.countryId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateFilm1CountryId!!
        body.append("countryId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      // Argument: createFilm.film
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateFilm1Film!!
        body.append("film").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("FilmInput!")
      }

      // Argument: createFilm.tags
      if (__innerCreateFilm1!!.tags != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateFilm1!!.tags!!
        body.append("tags").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("TagInput")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerCreateFilm1!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: createActor
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCreateActor2(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("createActor" !in ignore && __innerCreateActor2 != null) {
      body.append(' ').append("createActor")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: createActor.countryId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateActor2CountryId!!
        body.append("countryId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      // Argument: createActor.actor
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateActor2Actor!!
        body.append("actor").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ActorInput!")
      }

      // Argument: createActor.tags
      if (__innerCreateActor2!!.tags != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerCreateActor2!!.tags!!
        body.append("tags").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("TagInput")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerCreateActor2!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: createCountry
    ____innerBuildCreateCountry0(ignore, header, body, arguments)

    // Field: createFilm
    ____innerBuildCreateFilm1(ignore, header, body, arguments)

    // Field: createActor
    ____innerBuildCreateActor2(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal class MutationCreateFilmQueryImpl : FilmProjectionImpl(), MutationCreateFilmQuery {
  public override var tags: TagInput? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: MutationCreateFilmSelection): Unit {
    __selection.tags = tags
  }
}

internal class MutationCreateActorQueryImpl : ActorProjectionImpl(), MutationCreateActorQuery {
  public override var tags: TagInput? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: MutationCreateActorSelection): Unit {
    __selection.tags = tags
  }
}

internal fun MutationDto.buildEntity(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: MutationProjectionImpl): Mutation =
    MutationImpl(__innerContext, __innerProjection, this)

internal fun MutationDto.resolveCreateCountry(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: CountryProjectionImpl): Country =
    createCountry?.buildEntity(__innerContext, __innerProjection)!!

internal fun MutationDto.resolveCreateFilm(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: FilmProjectionImpl): Film =
    createFilm?.buildEntity(__innerContext, __innerProjection)!!

internal fun MutationDto.resolveCreateActor(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: ActorProjectionImpl): Actor =
    createActor?.buildEntity(__innerContext, __innerProjection)!!
