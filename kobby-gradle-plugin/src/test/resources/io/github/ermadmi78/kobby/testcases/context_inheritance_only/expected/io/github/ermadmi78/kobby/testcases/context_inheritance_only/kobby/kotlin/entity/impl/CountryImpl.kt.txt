@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlySubscriber
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Actor
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.ActorProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryActorsQuery
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryActorsSelection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryFilmsQuery
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryFilmsSelection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.FilmProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Native
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.NativeQualifiedProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.SubscriptionProjection
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.Taggable
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity.TaggableQualifiedProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class CountryImpl(
  internal val __innerContext: ContextInheritanceOnlyContext,
  internal val __innerProjection: CountryProjectionImpl,
  internal val __innerDto: CountryDto,
) : Country {
  public override val id: Long
    get() = __innerDto.id!!

  public override val name: String
    get() {
      if (!__innerProjection.__innerName1) {
        error("Property [name] is not available - remove [__withoutName] projection to switch on it")
      }
      return __innerDto.name!!
    }

  public override val film: Film? by lazy {
    if (__innerProjection.__innerFilm2 == null) {
      error("Property [film] is not available - add [film] projection to switch on it")
    }
    __innerDto.resolveFilm(__innerContext, __innerProjection.__innerFilm2!!)
  }


  public override val films: List<Film> by lazy {
    if (__innerProjection.__innerFilms3 == null) {
      error("Property [films] is not available - add [films] projection to switch on it")
    }
    __innerDto.resolveFilms(__innerContext, __innerProjection.__innerFilms3!!)
  }


  public override val actor: Actor? by lazy {
    if (__innerProjection.__innerActor4 == null) {
      error("Property [actor] is not available - add [actor] projection to switch on it")
    }
    __innerDto.resolveActor(__innerContext, __innerProjection.__innerActor4!!)
  }


  public override val actors: List<Actor> by lazy {
    if (__innerProjection.__innerActors5 == null) {
      error("Property [actors] is not available - add [actors] projection to switch on it")
    }
    __innerDto.resolveActors(__innerContext, __innerProjection.__innerActors5!!)
  }


  public override val taggable: List<Taggable> by lazy {
    if (__innerProjection.__innerTaggable6 == null) {
      error("Property [taggable] is not available - add [taggable] projection to switch on it")
    }
    __innerDto.resolveTaggable(__innerContext, __innerProjection.__innerTaggable6!!)
  }


  public override val native: List<Native> by lazy {
    if (__innerProjection.__innerNative7 == null) {
      error("Property [native] is not available - add [native] projection to switch on it")
    }
    __innerDto.resolveNative(__innerContext, __innerProjection.__innerNative7!!)
  }


  public override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as CountryImpl
    return __innerDto.id == other.__innerDto.id
  }

  public override fun hashCode(): Int = __innerDto.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Country").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerName1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    if (__innerProjection.__innerFilm2 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("film").append('=').append(film)
    }

    if (__innerProjection.__innerFilms3 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("films").append('=').append(films)
    }

    if (__innerProjection.__innerActor4 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actor").append('=').append(actor)
    }

    if (__innerProjection.__innerActors5 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    if (__innerProjection.__innerTaggable6 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("taggable").append('=').append(taggable)
    }

    if (__innerProjection.__innerNative7 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("native").append('=').append(native)
    }

    append(')')
  }

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ContextInheritanceOnlySubscriber<Subscription> = __innerContext.subscription(__projection)

  public override fun CountryProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class CountryProjectionImpl : CountryProjection {
  internal var __innerName1: Boolean = true

  internal var __innerFilm2: FilmProjectionImpl? = null

  internal var __innerFilm2Id: Long? = null

  internal var __innerFilms3: CountryFilmsQueryImpl? = null

  internal var __innerActor4: ActorProjectionImpl? = null

  internal var __innerActor4Id: Long? = null

  internal var __innerActors5: CountryActorsQueryImpl? = null

  internal var __innerTaggable6: TaggableQualifiedProjectionImpl? = null

  internal var __innerTaggable6Tag: String? = null

  internal var __innerNative7: NativeQualifiedProjectionImpl? = null

  public override fun __withoutName(): Unit {
    __innerName1 = false
  }

  public override fun film(id: Long, __projection: FilmProjection.() -> Unit): Unit {
    __innerFilm2 = FilmProjectionImpl().apply(__projection)
    __innerFilm2Id = id
  }

  public override fun films(__query: CountryFilmsQuery.() -> Unit): Unit {
    __innerFilms3 = CountryFilmsQueryImpl().apply(__query)
  }

  public override fun actor(id: Long, __projection: ActorProjection.() -> Unit): Unit {
    __innerActor4 = ActorProjectionImpl().apply(__projection)
    __innerActor4Id = id
  }

  public override fun actors(__query: CountryActorsQuery.() -> Unit): Unit {
    __innerActors5 = CountryActorsQueryImpl().apply(__query)
  }

  public override fun taggable(tag: String, __projection: TaggableQualifiedProjection.() -> Unit):
      Unit {
    __innerTaggable6 = TaggableQualifiedProjectionImpl().apply(__projection)
    __innerTaggable6Tag = tag
  }

  public override fun native(__projection: NativeQualifiedProjection.() -> Unit): Unit {
    __innerNative7 = NativeQualifiedProjectionImpl().apply(__projection)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: CountryProjection):
      Unit {
    if ("name" !in ignore && !__innerName1) {
      __projection.__withoutName()
    }
    if ("film" !in ignore && __innerFilm2 != null) {
      __projection.film(__innerFilm2Id!!) {
        this@CountryProjectionImpl.__innerFilm2!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("films" !in ignore && __innerFilms3 != null) {
      __projection.films {
        this@CountryProjectionImpl.__innerFilms3!!.___innerRepeatProjection(setOf(), this)
        this@CountryProjectionImpl.__innerFilms3!!.___innerRepeatSelection(this)
      }
    }
    if ("actor" !in ignore && __innerActor4 != null) {
      __projection.actor(__innerActor4Id!!) {
        this@CountryProjectionImpl.__innerActor4!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("actors" !in ignore && __innerActors5 != null) {
      __projection.actors {
        this@CountryProjectionImpl.__innerActors5!!.___innerRepeatProjection(setOf(), this)
        this@CountryProjectionImpl.__innerActors5!!.___innerRepeatSelection(this)
      }
    }
    if ("taggable" !in ignore && __innerTaggable6 != null) {
      __projection.taggable(__innerTaggable6Tag!!) {
        this@CountryProjectionImpl.__innerTaggable6!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("native" !in ignore && __innerNative7 != null) {
      __projection.native {
        this@CountryProjectionImpl.__innerNative7!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: film
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFilm2(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("film" !in ignore && __innerFilm2 != null) {
      body.append(' ').append("film")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: film.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilm2Id!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerFilm2!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: films
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFilms3(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("films" !in ignore && __innerFilms3 != null) {
      body.append(' ').append("films")
      var counter = 0
      val addBrackets = __innerFilms3!!.title != null || __innerFilms3!!.genre != null ||
          __innerFilms3!!.limit != null || __innerFilms3!!.offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: films.title
      if (__innerFilms3!!.title != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms3!!.title!!
        body.append("title").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: films.genre
      if (__innerFilms3!!.genre != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms3!!.genre!!
        body.append("genre").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Genre")
      }

      // Argument: films.limit
      if (__innerFilms3!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms3!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: films.offset
      if (__innerFilms3!!.offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms3!!.offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerFilms3!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actor
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActor4(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("actor" !in ignore && __innerActor4 != null) {
      body.append(' ').append("actor")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actor.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActor4Id!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActor4!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildActors5(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("actors" !in ignore && __innerActors5 != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = __innerActors5!!.firstName != null || __innerActors5!!.gender != null ||
          __innerActors5!!.limit != null || __innerActors5!!.offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (__innerActors5!!.firstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors5!!.firstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.gender
      if (__innerActors5!!.gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors5!!.gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (__innerActors5!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors5!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: actors.offset
      if (__innerActors5!!.offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerActors5!!.offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      __innerActors5!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: taggable
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildTaggable6(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("taggable" !in ignore && __innerTaggable6 != null) {
      body.append(' ').append("taggable")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: taggable.tag
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerTaggable6Tag!!
        body.append("tag").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Taggable
      __innerTaggable6!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: name
    if ("name" !in ignore && __innerName1) {
      body.append(' ').append("name")
    }

    // Field: film
    ____innerBuildFilm2(ignore, header, body, arguments)

    // Field: films
    ____innerBuildFilms3(ignore, header, body, arguments)

    // Field: actor
    ____innerBuildActor4(ignore, header, body, arguments)

    // Field: actors
    ____innerBuildActors5(ignore, header, body, arguments)

    // Field: taggable
    ____innerBuildTaggable6(ignore, header, body, arguments)

    // Field: native
    if ("native" !in ignore && __innerNative7 != null) {
      body.append(' ').append("native")

      // Build nested projection of Native
      __innerNative7!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append('}')
  }
}

internal class CountryFilmsQueryImpl : FilmProjectionImpl(), CountryFilmsQuery {
  public override var title: String? = null

  public override var genre: Genre? = null

  public override var limit: Int? = null

  public override var offset: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: CountryFilmsSelection): Unit {
    __selection.title = title
    __selection.genre = genre
    __selection.limit = limit
    __selection.offset = offset
  }
}

internal class CountryActorsQueryImpl : ActorProjectionImpl(), CountryActorsQuery {
  public override var firstName: String? = null

  public override var gender: Gender? = null

  public override var limit: Int? = null

  public override var offset: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatSelection(__selection: CountryActorsSelection): Unit {
    __selection.firstName = firstName
    __selection.gender = gender
    __selection.limit = limit
    __selection.offset = offset
  }
}

internal fun CountryDto.buildEntity(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: CountryProjectionImpl): Country =
    CountryImpl(__innerContext, __innerProjection, this)

internal fun CountryDto.resolveFilm(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: FilmProjectionImpl): Film? =
    film?.buildEntity(__innerContext, __innerProjection)

internal fun CountryDto.resolveFilms(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: FilmProjectionImpl): List<Film> =
    films?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveActor(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: ActorProjectionImpl): Actor? =
    actor?.buildEntity(__innerContext, __innerProjection)

internal fun CountryDto.resolveActors(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: ActorProjectionImpl): List<Actor> =
    actors?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveTaggable(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: TaggableQualifiedProjectionImpl): List<Taggable> =
    taggable?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()

internal fun CountryDto.resolveNative(__innerContext: ContextInheritanceOnlyContext,
    __innerProjection: NativeQualifiedProjectionImpl): List<Native> =
    native?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
