@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit

public interface ComplexIntermediateBase1 : ComplexBase1 {
  public val noOverride0: String

  override val noOverride1: String

  override val complexMultiOverride: String

  public val intermediateMultiOverride: String

  override fun __context(): MultiOverrideContext
}

@MultiOverrideDSL
public interface ComplexIntermediateBase1Projection : ComplexBase1Projection {
  public fun noOverride0(size: Int? = null)

  override fun noOverride1(size: Int?)

  override fun complexMultiOverride(size: Int?)

  public fun intermediateMultiOverride(size: Int?)

  override fun __minimize() {
  }
}

@MultiOverrideDSL
public interface ComplexIntermediateBase1Qualification {
  public fun __onComplexMultiOverride(__projection: ComplexMultiOverrideProjection.() -> Unit)

  public
      fun __onIntermediateMultiOverride(__projection: IntermediateMultiOverrideProjection.() -> Unit)
}

@MultiOverrideDSL
public interface ComplexIntermediateBase1QualifiedProjection : ComplexIntermediateBase1Projection,
    ComplexIntermediateBase1Qualification
