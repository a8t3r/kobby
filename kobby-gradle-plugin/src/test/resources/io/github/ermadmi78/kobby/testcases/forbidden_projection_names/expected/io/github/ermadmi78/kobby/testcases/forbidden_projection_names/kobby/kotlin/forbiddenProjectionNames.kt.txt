@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin

import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.SubscriptionProjection
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.`impl`.MutationProjectionImpl
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.`impl`.QueryProjectionImpl
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.`impl`.SubscriptionProjectionImpl
import io.github.ermadmi78.kobby.testcases.forbidden_projection_names.kobby.kotlin.entity.`impl`.buildEntity
import kotlin.Any
import kotlin.DslMarker
import kotlin.NotImplementedError
import kotlin.Pair
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.Map
import kotlin.collections.MutableMap
import kotlin.collections.mutableMapOf
import kotlin.collections.setOf
import kotlin.reflect.KClass
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import kotlin.to

public fun forbiddenProjectionNamesContextOf(adapter: ForbiddenProjectionNamesAdapter):
    ForbiddenProjectionNamesContext = ForbiddenProjectionNamesContextImpl(adapter)

public fun buildForbiddenProjectionNamesQuery(__projection: QueryProjection.() -> Unit):
    Pair<String, Map<String, Any>> {
  val projectionRef = QueryProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, Any> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val query = buildString(header.length + body.length + 7) {
    append("query")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return query to arguments
}

public fun buildForbiddenProjectionNamesMutation(__projection: MutationProjection.() -> Unit):
    Pair<String, Map<String, Any>> {
  val projectionRef = MutationProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, Any> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val mutation = buildString(header.length + body.length + 10) {
    append("mutation")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return mutation to arguments
}

public
    fun buildForbiddenProjectionNamesSubscription(__projection: SubscriptionProjection.() -> Unit):
    Pair<String, Map<String, Any>> {
  val projectionRef = SubscriptionProjectionImpl().apply(__projection)

  val header = StringBuilder()
  val body = StringBuilder(64)
  val arguments: MutableMap<String, Any> = mutableMapOf()
  projectionRef.___innerBuild(setOf(), header, body, arguments)

  val subscription = buildString(header.length + body.length + 14) {
    append("subscription")
    if (header.isNotEmpty()) {
      append('(').append(header).append(')')
    }
    append(body)
  }

  return subscription to arguments
}

public interface ForbiddenProjectionNamesContext {
  public suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ForbiddenProjectionNamesSubscriber<Subscription>
}

public fun interface ForbiddenProjectionNamesSubscriber<T> {
  public suspend fun subscribe(block: suspend ForbiddenProjectionNamesReceiver<T>.() -> Unit): Unit
}

@ForbiddenProjectionNamesDSL
public fun interface ForbiddenProjectionNamesReceiver<out T> {
  public suspend fun receive(): T
}

public interface ForbiddenProjectionNamesAdapter {
  public suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto =
      throw NotImplementedError("Adapter function executeQuery is not implemented")

  public suspend fun executeMutation(query: String, variables: Map<String, Any?>): MutationDto =
      throw NotImplementedError("Adapter function executeMutation is not implemented")

  public suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend ForbiddenProjectionNamesReceiver<SubscriptionDto>.() -> Unit,
  ): Unit = throw NotImplementedError("Adapter function executeSubscription is not implemented")
}

private class ForbiddenProjectionNamesContextImpl(
  private val adapter: ForbiddenProjectionNamesAdapter,
) : ForbiddenProjectionNamesContext {
  /**
   * https://youtrack.jetbrains.com/issue/KTIJ-844
   */
  @Suppress("BlockingMethodInNonBlockingContext")
  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query {
    val projectionRef = QueryProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, Any> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val query = buildString(header.length + body.length + 7) {
      append("query")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    val queryDto: QueryDto = adapter.executeQuery(query, arguments)
    return queryDto.buildEntity(this, projectionRef)
  }

  /**
   * https://youtrack.jetbrains.com/issue/KTIJ-844
   */
  @Suppress("BlockingMethodInNonBlockingContext")
  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation {
    val projectionRef = MutationProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, Any> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val mutation = buildString(header.length + body.length + 10) {
      append("mutation")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    val mutationDto: MutationDto = adapter.executeMutation(mutation, arguments)
    return mutationDto.buildEntity(this, projectionRef)
  }

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ForbiddenProjectionNamesSubscriber<Subscription> {
    val projectionRef = SubscriptionProjectionImpl().apply(__projection)

    val header = StringBuilder()
    val body = StringBuilder(64)
    val arguments: MutableMap<String, Any> = mutableMapOf()
    projectionRef.___innerBuild(setOf(), header, body, arguments)

    val subscription = buildString(header.length + body.length + 14) {
      append("subscription")
      if (header.isNotEmpty()) {
        append('(').append(header).append(')')
      }
      append(body)
    }

    return ForbiddenProjectionNamesSubscriber<Subscription> {
      adapter.executeSubscription(subscription, arguments) {
        it.invoke(object : ForbiddenProjectionNamesReceiver<Subscription> {
          public override suspend fun receive(): Subscription {
            val subscriptionDto: SubscriptionDto = this@executeSubscription.receive()
            return subscriptionDto.buildEntity(this@ForbiddenProjectionNamesContextImpl,
                projectionRef)
          }
        })
      }
    }
  }
}

/**
 * Helper interface for default adapter implementations
 */
public interface ForbiddenProjectionNamesMapper {
  public fun serialize(`value`: Any): String

  public fun <T : Any> deserialize(content: String, contentType: KClass<T>): T
}

@DslMarker
public annotation class ForbiddenProjectionNamesDSL
