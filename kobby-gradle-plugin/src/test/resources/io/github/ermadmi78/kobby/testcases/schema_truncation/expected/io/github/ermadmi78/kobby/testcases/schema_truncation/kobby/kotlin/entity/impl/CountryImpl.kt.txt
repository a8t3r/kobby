@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.cinemaJson
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.EntityFieldsSelection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.encodeToJsonElement

internal class CountryImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: CountryProjectionImpl,
  internal val __innerDto: CountryDto,
) : Country {
  override val id: Long
    get() = __innerDto.id!!

  override val fields: JsonObject
    get() {
      if (__innerProjection.__innerFields1 == null) {
        error("Property [fields] is not available - add [fields] projection to switch on it")
      }
      return __innerDto.fields!!
    }

  override val name: String
    get() {
      if (!__innerProjection.__innerName2) {
        error("Property [name] is not available - remove [__withoutName] projection to switch on it")
      }
      return __innerDto.name!!
    }

  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as CountryImpl
    return __innerDto.id == other.__innerDto.id
  }

  override fun hashCode(): Int = __innerDto.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Country").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerFields1 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("fields").append('=').append(fields)
    }

    if (__innerProjection.__innerName2) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    append(')')
  }

  override fun __context(): CinemaContext = __innerContext

  override fun CountryProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class CountryProjectionImpl : CountryProjection {
  internal var __innerFields1: EntityFieldsSelectionImpl? = null

  internal var __innerName2: Boolean = true

  override fun fields(__selection: EntityFieldsSelection.() -> Unit) {
    __innerFields1 = EntityFieldsSelectionImpl().apply(__selection)
  }

  override fun __withoutName() {
    __innerName2 = false
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: CountryProjection) {
    if ("fields" !in ignore && __innerFields1 != null) {
      __projection.fields {
        this@CountryProjectionImpl.__innerFields1!!.___innerRepeatSelection(this)
      }
    }
    if ("name" !in ignore && !__innerName2) {
      __projection.__withoutName()
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFields1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("fields" !in ignore && __innerFields1 != null) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = __innerFields1!!.keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (__innerFields1!!.keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerFields1!!.keys!!)
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    ____innerBuildFields1(ignore, header, body, arguments)

    // Field: name
    if ("name" !in ignore && __innerName2) {
      body.append(' ').append("name")
    }

    body.append(' ').append('}')
  }
}

internal fun CountryDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country =
    CountryImpl(__innerContext, __innerProjection, this)
