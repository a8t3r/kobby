@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import kotlin.Int
import kotlin.String
import kotlin.Suppress

public interface TypeMultiOverride : TypeBase1, TypeBase2 {
  override val noOverride1: String

  override val noOverride2: String

  override val typeMultiOverride: String

  public val finalField: String

  override fun __context(): MultiOverrideContext

  public fun TypeMultiOverrideProjection.__withCurrentProjection()
}

@MultiOverrideDSL
public interface TypeMultiOverrideProjection : TypeBase1Projection, TypeBase2Projection {
  override fun noOverride1(size: Int?)

  override fun noOverride2(size: Int?)

  override fun typeMultiOverride(size: Int?)

  public fun finalField(size: Int? = null)

  override fun __minimize() {
  }
}
