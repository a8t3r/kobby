@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto.PointDto
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.Point
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.PointProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class PointImpl(
  internal val __innerContext: EscapeContext,
  internal val __innerProjection: PointProjectionImpl,
  internal val __innerDto: PointDto,
) : Point {
  override val x: Int
    get() {
      if (!__innerProjection.__innerX0) {
        error("Property [x] is not available - add [x] projection to switch on it")
      }
      return __innerDto.x!!
    }

  override val y: Int
    get() {
      if (!__innerProjection.__innerY1) {
        error("Property [y] is not available - add [y] projection to switch on it")
      }
      return __innerDto.y!!
    }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Point").append('(')

    var counter = 0

    if (__innerProjection.__innerX0) {
      if (counter++ > 0) {
        append(", ")
      }
      append("x").append('=').append(x)
    }

    if (__innerProjection.__innerY1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("y").append('=').append(y)
    }

    append(')')
  }

  override fun __context(): EscapeContext = __innerContext

  override fun PointProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class PointProjectionImpl : PointProjection {
  internal var __innerX0: Boolean = false

  internal var __innerY1: Boolean = false

  override fun x() {
    __innerX0 = true
  }

  override fun y() {
    __innerY1 = true
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: PointProjection) {
    if ("x" !in ignore && __innerX0) {
      __projection.x()
    }
    if ("y" !in ignore && __innerY1) {
      __projection.y()
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: x
    if ("x" !in ignore && __innerX0) {
      body.append(' ').append("x")
    }

    // Field: y
    if ("y" !in ignore && __innerY1) {
      body.append(' ').append("y")
    }

    body.append(' ').append('}')
  }
}

internal fun PointDto.buildEntity(__innerContext: EscapeContext,
    __innerProjection: PointProjectionImpl): Point =
    PointImpl(__innerContext, __innerProjection, this)
