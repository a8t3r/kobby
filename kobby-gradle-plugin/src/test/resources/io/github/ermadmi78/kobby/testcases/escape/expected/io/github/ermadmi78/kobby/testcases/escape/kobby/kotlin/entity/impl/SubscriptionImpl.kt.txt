@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.Escape
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.EscapeProjection
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity.SubscriptionProjection
import kotlin.Any
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class SubscriptionImpl(
  internal val __innerContext: EscapeContext,
  internal val __innerProjection: SubscriptionProjectionImpl,
  internal val __innerDto: SubscriptionDto,
) : Subscription {
  public override val `by`: Escape? by lazy {
    if (__innerProjection.__innerBy0 == null) {
      error("Property [by] is not available - add [by] projection to switch on it")
    }
    __innerDto.resolveBy(__innerContext, __innerProjection.__innerBy0!!)
  }


  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Subscription").append('(')

    var counter = 0

    if (__innerProjection.__innerBy0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("by").append('=').append(`by`)
    }

    append(')')
  }

  public override fun __context(): EscapeContext = __innerContext

  public override fun SubscriptionProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class SubscriptionProjectionImpl : SubscriptionProjection {
  internal var __innerBy0: EscapeProjectionImpl? = null

  internal var __innerBy0In: Int? = null

  public override fun `by`(`in`: Int?, __projection: EscapeProjection.() -> Unit): Unit {
    __innerBy0 = EscapeProjectionImpl().apply(__projection)
    __innerBy0In = `in`
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: SubscriptionProjection):
      Unit {
    if ("by" !in ignore && __innerBy0 != null) {
      __projection.`by`(__innerBy0In) {
        this@SubscriptionProjectionImpl.__innerBy0!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: by
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildBy0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("by" !in ignore && __innerBy0 != null) {
      body.append(' ').append("by")
      var counter = 0
      val addBrackets = __innerBy0In != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: by.in
      if (__innerBy0In != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerBy0In!!
        body.append("in").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Escape
      __innerBy0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: by
    ____innerBuildBy0(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun SubscriptionDto.buildEntity(__innerContext: EscapeContext,
    __innerProjection: SubscriptionProjectionImpl): Subscription =
    SubscriptionImpl(__innerContext, __innerProjection, this)

internal fun SubscriptionDto.resolveBy(__innerContext: EscapeContext,
    __innerProjection: EscapeProjectionImpl): Escape? =
    `by`?.buildEntity(__innerContext, __innerProjection)
