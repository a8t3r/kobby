@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.entity.Film
import io.github.ermadmi78.kobby.testcases.enable_commit.kobby.kotlin.entity.FilmProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty

internal class CountryImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: CountryProjectionImpl,
  internal val __innerDto: CountryDto,
) : Country {
  public override val id: Long
    get() {
      if (!__innerProjection.__innerId0) {
        error("Property [id] is not available - add [id] projection to switch on it")
      }
      return __innerDto.id!!
    }

  public override val name: String
    get() {
      if (!__innerProjection.__innerName1) {
        error("Property [name] is not available - add [name] projection to switch on it")
      }
      return __innerDto.name!!
    }

  public override val films: List<Film> by lazy {
    if (__innerProjection.__innerFilms2 == null) {
      error("Property [films] is not available - add [films] projection to switch on it")
    }
    __innerDto.resolveFilms(__innerContext, __innerProjection.__innerFilms2!!)
  }


  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public override fun toString(): String = buildString {
    append("Country").append('(')

    var counter = 0

    if (__innerProjection.__innerId0) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerName1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    if (__innerProjection.__innerFilms2 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("films").append('=').append(films)
    }

    append(')')
  }

  public override fun __context(): CinemaContext = __innerContext

  public override fun CountryProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class CountryProjectionImpl : CountryProjection {
  internal var __innerId0: Boolean = false

  internal var __innerName1: Boolean = false

  internal var __innerFilms2: FilmProjectionImpl? = null

  internal var __innerFilms2Offset: Int? = null

  internal var __innerFilms2Limit: Int? = null

  public override fun id(): Unit {
    __innerId0 = true
  }

  public override fun name(): Unit {
    __innerName1 = true
  }

  public override fun films(
    offset: Int?,
    limit: Int?,
    __projection: FilmProjection.() -> Unit,
  ): Unit {
    __innerFilms2 = FilmProjectionImpl().apply(__projection)
    __innerFilms2Offset = offset
    __innerFilms2Limit = limit
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: CountryProjection):
      Unit {
    if ("id" !in ignore && __innerId0) {
      __projection.id()
    }
    if ("name" !in ignore && __innerName1) {
      __projection.name()
    }
    if ("films" !in ignore && __innerFilms2 != null) {
      __projection.films(__innerFilms2Offset, __innerFilms2Limit) {
        this@CountryProjectionImpl.__innerFilms2!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection for field: films
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildFilms2(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    if ("films" !in ignore && __innerFilms2 != null) {
      body.append(' ').append("films")
      var counter = 0
      val addBrackets = __innerFilms2Offset != null || __innerFilms2Limit != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: films.offset
      if (__innerFilms2Offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms2Offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: films.limit
      if (__innerFilms2Limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerFilms2Limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      __innerFilms2!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore && __innerId0) {
      body.append(' ').append("id")
    }

    // Field: name
    if ("name" !in ignore && __innerName1) {
      body.append(' ').append("name")
    }

    // Field: films
    ____innerBuildFilms2(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun CountryDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country =
    CountryImpl(__innerContext, __innerProjection, this)

internal fun CountryDto.resolveFilms(__innerContext: CinemaContext,
    __innerProjection: FilmProjectionImpl): List<Film> =
    films?.map { it.buildEntity(__innerContext, __innerProjection) } ?: listOf()
