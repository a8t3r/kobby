@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.forbidden_enum_name.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.forbidden_enum_name.kobby.kotlin.ForbiddenEnumNameDSL
import kotlin.Long
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "User")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = UserDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class UserDto(
  public val id: Long? = null,
  public val update_column: user_update_column? = null,
  public val mischievous: mischievous? = null,
)

public fun UserDto.toBuilder(): UserDtoBuilder = UserDtoBuilder().also {
  it.id = this.id
  it.update_column = this.update_column
  it.mischievous = this.mischievous
}

public fun UserDtoBuilder.toDto(): UserDto = UserDto(
  id,
  update_column,
  mischievous
)

public fun UserDto(block: UserDtoBuilder.() -> Unit): UserDto =
    UserDtoBuilder().apply(block).toDto()

public fun UserDto.copy(block: UserDtoBuilder.() -> Unit): UserDto =
    toBuilder().apply(block).toDto()

@ForbiddenEnumNameDSL
public class UserDtoBuilder {
  public var id: Long? = null

  public var update_column: user_update_column? = null

  public var mischievous: mischievous? = null
}
