@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Int
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "Point")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = PointDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class PointDto(
  public val x: Int? = null,
  public val y: Int? = null,
)

public fun PointDto.toBuilder(): PointDtoBuilder = PointDtoBuilder().also {
  it.x = this.x
  it.y = this.y
}

public fun PointDtoBuilder.toDto(): PointDto = PointDto(
  x,
  y
)

public fun PointDto(block: PointDtoBuilder.() -> Unit): PointDto =
    PointDtoBuilder().apply(block).toDto()

public fun PointDto.copy(block: PointDtoBuilder.() -> Unit): PointDto =
    toBuilder().apply(block).toDto()

@EscapeDSL
public class PointDtoBuilder {
  public var x: Int? = null

  public var y: Int? = null
}
