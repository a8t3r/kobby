@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.resolver

import graphql.kickstart.tools.GraphQLResolver
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.ActorDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.NativeDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.TaggableDto
import java.time.LocalDate
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlinx.serialization.json.JsonObject

/**
 * Country entity.
 * The country can be home to several films and several actors.
 */
public interface CinemaCountryResolver : GraphQLResolver<CountryDto> {
  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   * @param keys List of field keys to load.
   * If no keys specified all entity fields will be loaded.
   */
  public suspend fun fields(country: CountryDto, keys: List<String>?): JsonObject

  /**
   * Find film by id.
   * Returns null if not found.
   */
  public suspend fun film(country: CountryDto, id: Long): FilmDto?

  /**
   * Find films of country by title and genre.
   * Returns empty list if not found.
   * @param title Part of title of film to search
   * @param genre Genre of film to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited.
   * @param offset Offset of result list.
   */
  public suspend fun films(
    country: CountryDto,
    title: String?,
    genre: Genre?,
    limit: Int,
    offset: Int,
  ): List<FilmDto>

  /**
   * Find actor by id.
   * Returns null if not found.
   */
  public suspend fun actor(country: CountryDto, id: Long): ActorDto?

  /**
   * Find actors of country by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   * @param firstName Part of first name of actor to search
   * @param lastName Part of last name of actor to search
   * @param birthdayFrom Find actors whose birthday is greater than or equal to birthdayFrom
   * @param birthdayTo Find actors whose birthday is less than or equal to birthdayTo
   * @param gender Gender of actor to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited.
   * @param offset Offset of result list.
   */
  public suspend fun actors(
    country: CountryDto,
    firstName: String?,
    lastName: String?,
    birthdayFrom: LocalDate?,
    birthdayTo: LocalDate?,
    gender: Gender?,
    limit: Int,
    offset: Int,
  ): List<ActorDto>

  /**
   * Find entities of this country by tag
   */
  public suspend fun taggable(country: CountryDto, tag: String): List<TaggableDto>

  /**
   * Find native entities of this country
   */
  public suspend fun native(country: CountryDto): List<NativeDto>
}
