@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.SimpleDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Query {
  public val simple: List<Simple>

  public fun __context(): SimpleContext

  public fun QueryProjection.__withCurrentProjection(): Unit
}

@SimpleDSL
public interface QueryProjection {
  public fun simple(name: String? = null, __projection: SimpleProjection.() -> Unit): Unit

  public fun __minimize(): Unit {
  }
}
