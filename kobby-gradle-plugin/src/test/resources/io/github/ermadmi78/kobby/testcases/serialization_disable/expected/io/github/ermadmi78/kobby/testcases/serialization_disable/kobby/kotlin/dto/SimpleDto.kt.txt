@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.SimpleDSL
import io.github.ermadmi78.kobby.testcases.serialization_disable.kobby.kotlin.dto.serializer.LocalDateSerializer
import java.time.LocalDate
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.let
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
@SerialName("Simple")
public data class SimpleDto(
  public val id: Long? = null,
  public val name: String? = null,
  public val date: @Serializable(with = LocalDateSerializer::class) LocalDate? = null,
)

public fun SimpleDto(block: SimpleDtoBuilder.() -> Unit): SimpleDto {
  // SimpleDto builder DSL
  return SimpleDtoBuilder().apply(block).let {
    SimpleDto(
          it.id,
          it.name,
          it.date
        )
  }
}

public fun SimpleDto.copy(block: SimpleDtoBuilder.() -> Unit): SimpleDto {
  // SimpleDto copy DSL
  return SimpleDtoBuilder().also {
    it.id = this.id
    it.name = this.name
    it.date = this.date
  }
  .apply(block).let {
    SimpleDto(
          it.id,
          it.name,
          it.date
        )
  }
}

@SimpleDSL
public class SimpleDtoBuilder {
  public var id: Long? = null

  public var name: String? = null

  public var date: LocalDate? = null
}
