@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.en

import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import my.root.ctx.PrefCtxContextPostCtx
import my.root.ctx.PrefCtxDSLPostCtx

public interface PrefEnEntityPostEn {
  public val id: Long

  public val fields: String

  public fun context(): PrefCtxContextPostCtx
}

@PrefCtxDSLPostCtx
public interface PrePrEntityPostPr {
  public fun withPrFieldsWithPo(selection: PreSelEntityFieldsPostSel.() -> Unit = {})

  public fun minimize() {
  }
}

@PrefCtxDSLPostCtx
public interface PreQalEntityPostQal {
  public fun onPrCountryOnPo(projection: PrePrCountryPostPr.() -> Unit = {})

  public fun onPrFilmOnPo(projection: PrePrFilmPostPr.() -> Unit = {})

  public fun onPrActorOnPo(projection: PrePrActorPostPr.() -> Unit = {})
}

@PrefCtxDSLPostCtx
public interface PreQPEntityPostQP : PrePrEntityPostPr, PreQalEntityPostQal

@PrefCtxDSLPostCtx
public interface PreSelEntityFieldsPostSel {
  public var keys: List<String>?
}
