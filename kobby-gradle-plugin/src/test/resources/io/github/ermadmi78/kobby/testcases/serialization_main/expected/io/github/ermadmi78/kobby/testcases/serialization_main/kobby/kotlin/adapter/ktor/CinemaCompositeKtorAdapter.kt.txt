@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.CinemaAdapter
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.CinemaReceiver
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.cinemaJson
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaClientMessage
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaException
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageComplete
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageConnectionError
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageConnectionKeepAlive
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageConnectionTerminate
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageData
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageError
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageStart
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMessageStop
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaMutationResult
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaQueryResult
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaRequest
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.graphql.CinemaServerMessage
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeout
import kotlinx.serialization.decodeFromString
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonObject
import kotlinx.serialization.json.JsonPrimitive

public open class CinemaCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: Json = cinemaJson,
  protected val requestHeaders: suspend () -> Map<String, String> = { mapOf<String, String>() },
  protected val subscriptionPayload: suspend () -> JsonObject? = { null },
  protected val subscriptionReceiveTimeoutMillis: Long? = null,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (CinemaRequest) -> Unit = {},
) : CinemaAdapter {
  public override suspend fun executeQuery(query: String, variables: JsonObject): QueryDto {
    val request = CinemaRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.encodeToString(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.decodeFromString<CinemaQueryResult>(content)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CinemaException("GraphQL query failed", request, it)
    }
    return result.data ?: throw CinemaException(
          "GraphQL query completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeMutation(query: String, variables: JsonObject): MutationDto {
    val request = CinemaRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders()
    val content = client.post {
      setBody<String>(mapper.encodeToString(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.decodeFromString<CinemaMutationResult>(content)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CinemaException("GraphQL mutation failed", request, it)
    }
    return result.data ?: throw CinemaException(
          "GraphQL mutation completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeSubscription(
    query: String,
    variables: JsonObject,
    block: suspend CinemaReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    val httpHeaders: Map<String, String> = requestHeaders()
    val payload: JsonObject? = subscriptionPayload()
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: JsonObject? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = JsonObject(mapOf())
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          initPayload = JsonObject(initPayload + (webSocketAuthorizationTokenHeader to JsonPrimitive(httpHeaders[httpAuthorizationTokenHeader])))
        }
      }

      val request = CinemaRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: JsonObject?,
    request: CinemaRequest,
    block: suspend CinemaReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    sendMessage(CinemaMessageConnectionInit(initPayload))
    try {
      while (true) {
        when (val reply = receiveMessage()) {
          is CinemaMessageConnectionKeepAlive -> {
            continue
          }
          is CinemaMessageConnectionAck -> {
            break
          }
          is CinemaMessageConnectionError -> {
            throw CinemaException("""Connection error: ${reply.payload}""", request)
          }
          else -> {
            throw CinemaException("""Invalid protocol - unexpected reply: $reply""", request)
          }
        }
      }

      val subscriptionId = idGenerator()
      sendMessage(CinemaMessageStart(subscriptionId, request))

      try {
        block.invoke(object : CinemaReceiver<SubscriptionDto> {
          public override suspend fun receive(): SubscriptionDto {
            while (true) {
              when (val reply = receiveMessage()) {
                is CinemaMessageData -> {
                  require(reply.id == subscriptionId)

                  val result = reply.payload
                  result.errors?.takeIf { it.isNotEmpty() }?.let {
                    throw CinemaException("GraphQL subscription failed", request, it)
                  }
                  return result.data ?: throw CinemaException(
                        "GraphQL subscription completes successfully but returns no data",
                        request
                      )
                }
                is CinemaMessageError -> {
                  require(reply.id == subscriptionId)
                  throw CinemaException("Subscription failed", request, reply.payload.errors)
                }
                is CinemaMessageComplete -> {
                  require(reply.id == subscriptionId)
                  throw CancellationException("Subscription finished")
                }
                is CinemaMessageConnectionKeepAlive -> {
                  continue
                }
                else -> {
                  throw CinemaException("""Invalid protocol - unexpected reply: $reply""", request)
                }
              }
            }

            @Suppress("UNREACHABLE_CODE")
            error("Invalid algorithm")
          }
        })
      }
      finally {
        sendMessage(CinemaMessageStop(subscriptionId))
      }
    }
    finally {
      sendMessage(CinemaMessageConnectionTerminate())
    }
  }

  protected open suspend fun WebSocketSession.sendMessage(message: CinemaClientMessage): Unit {
    val content = mapper.encodeToString(message)
    send(content)
  }

  protected open suspend fun WebSocketSession.receiveMessage(): CinemaServerMessage {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      incoming.receive()
    }
    else {
      withTimeout(subscriptionReceiveTimeoutMillis) {
        incoming.receive()
      }
    }

    val content = (message as Frame.Text).readText()
    return mapper.decodeFromString<CinemaServerMessage>(content)
  }
}
