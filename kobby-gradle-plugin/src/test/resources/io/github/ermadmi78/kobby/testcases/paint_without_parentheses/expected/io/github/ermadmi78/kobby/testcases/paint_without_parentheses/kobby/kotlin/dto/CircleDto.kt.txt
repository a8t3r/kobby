@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.PaintDSL
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

@JsonTypeName(value = "Circle")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = CircleDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CircleDto(
  override val id: Long? = null,
  override val opaque: Boolean? = null,
  public val radius: Int? = null,
) : ShapeDto

public fun CircleDto.toBuilder(): CircleDtoBuilder = CircleDtoBuilder().also {
  it.id = this.id
  it.opaque = this.opaque
  it.radius = this.radius
}

public fun CircleDtoBuilder.toDto(): CircleDto = CircleDto(
  id,
  opaque,
  radius
)

public fun CircleDto(block: CircleDtoBuilder.() -> Unit): CircleDto =
    CircleDtoBuilder().apply(block).toDto()

public fun CircleDto.copy(block: CircleDtoBuilder.() -> Unit): CircleDto =
    toBuilder().apply(block).toDto()

@PaintDSL
public class CircleDtoBuilder {
  public var id: Long? = null

  public var opaque: Boolean? = null

  public var radius: Int? = null
}
