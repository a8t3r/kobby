@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.en

import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import my.root.ctx.PrefCtxContextPostCtx
import my.root.ctx.PrefCtxDSLPostCtx
import my.root.dto1.EPrefGenderEPost
import my.root.dto1.EPrefGenreEPost

public interface PrefEnFilmPostEn : PrefEnEntityPostEn, PrefEnNativePostEn {
  override val id: Long

  override val fields: String

  public val title: String

  public val genre: EPrefGenreEPost

  public val countryId: Long

  public val country: PrefEnCountryPostEn

  public val actors: List<PrefEnActorPostEn>

  override fun context(): PrefCtxContextPostCtx

  public fun PrePrFilmPostPr.withCurrentProjection()
}

@PrefCtxDSLPostCtx
public interface PrePrFilmPostPr : PrePrEntityPostPr, PrePrNativePostPr {
  override fun withPrFieldsWithPo(selection: PreSelEntityFieldsPostSel.() -> Unit)

  public fun withoutPrTitleWithoutPo()

  public fun withPrGenreWithPo()

  public fun withPrCountryWithPo(projection: PrePrCountryPostPr.() -> Unit = {})

  public fun withPrActorsWithPo(query: PreQrFilmActorsPostQr.() -> Unit = {})

  override fun minimize() {
    withoutPrTitleWithoutPo()
  }
}

@PrefCtxDSLPostCtx
public interface PreSelFilmActorsPostSel {
  public var firstName: String?

  public var lastName: String?

  public var gender: EPrefGenderEPost?

  /**
   * Default: 10
   */
  public var limit: Int?

  /**
   * Default: 0
   */
  public var offset: Int?
}

@PrefCtxDSLPostCtx
public interface PreQrFilmActorsPostQr : PreSelFilmActorsPostSel, PrePrActorPostPr
