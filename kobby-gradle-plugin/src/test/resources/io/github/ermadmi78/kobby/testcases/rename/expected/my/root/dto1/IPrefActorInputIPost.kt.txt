@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.dto1

import com.fasterxml.jackson.`annotation`.JsonInclude
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error
import my.root.ctx.PrefCtxDSLPostCtx

@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class IPrefActorInputIPost(
  public val firstName: String,
  public val lastName: String? = null,
  public val gender: EPrefGenderEPost,
)

public fun IPrefActorInputIPost.myBuilder1(): BPrefIPrefActorInputIPostBPost =
    BPrefIPrefActorInputIPostBPost().also {
  it.firstName = this.firstName
  it.lastName = this.lastName
  it.gender = this.gender
}

public fun BPrefIPrefActorInputIPostBPost.myInput3(): IPrefActorInputIPost = IPrefActorInputIPost(
  firstName ?: error("IPrefActorInputIPost: 'firstName' must not be null"),
  lastName,
  gender ?: error("IPrefActorInputIPost: 'gender' must not be null")
)

public fun IPrefActorInputIPost(block: BPrefIPrefActorInputIPostBPost.() -> Unit):
    IPrefActorInputIPost = BPrefIPrefActorInputIPostBPost().apply(block).myInput3()

public fun IPrefActorInputIPost.replicate(block: BPrefIPrefActorInputIPostBPost.() -> Unit):
    IPrefActorInputIPost = myBuilder1().apply(block).myInput3()

@PrefCtxDSLPostCtx
public class BPrefIPrefActorInputIPostBPost {
  public var firstName: String? = null

  public var lastName: String? = null

  public var gender: EPrefGenderEPost? = null
}
