@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.CountryContext
import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.disable_builder.kobby.kotlin.entity.SubscriptionProjection
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class SubscriptionImpl(
  internal val __innerContext: CountryContext,
  internal val __innerProjection: SubscriptionProjectionImpl,
  internal val __innerDto: SubscriptionDto,
) : Subscription {
  override val countryCreated: Country by lazy {
    if (__innerProjection.__innerCountryCreated0 == null) {
      error("Property [countryCreated] is not available - add [countryCreated] projection to switch on it")
    }
    __innerDto.resolveCountryCreated(__innerContext, __innerProjection.__innerCountryCreated0!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Subscription").append('(')

    var counter = 0

    if (__innerProjection.__innerCountryCreated0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countryCreated").append('=').append(countryCreated)
    }

    append(')')
  }

  override fun __context(): CountryContext = __innerContext

  override fun SubscriptionProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class SubscriptionProjectionImpl : SubscriptionProjection {
  internal var __innerCountryCreated0: CountryProjectionImpl? = null

  override fun countryCreated(__projection: CountryProjection.() -> Unit) {
    __innerCountryCreated0 = CountryProjectionImpl().apply(__projection)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: SubscriptionProjection) {
    if ("countryCreated" !in ignore && __innerCountryCreated0 != null) {
      __projection.countryCreated {
        this@SubscriptionProjectionImpl.__innerCountryCreated0!!.___innerRepeatProjection(setOf(), this)
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: countryCreated
    if ("countryCreated" !in ignore && __innerCountryCreated0 != null) {
      body.append(' ').append("countryCreated")

      // Build nested projection of Country
      __innerCountryCreated0!!.___innerBuild(setOf(), header, body, arguments)
    }

    body.append(' ').append('}')
  }
}

internal fun SubscriptionDto.buildEntity(__innerContext: CountryContext,
    __innerProjection: SubscriptionProjectionImpl): Subscription =
    SubscriptionImpl(__innerContext, __innerProjection, this)

internal fun SubscriptionDto.resolveCountryCreated(__innerContext: CountryContext,
    __innerProjection: CountryProjectionImpl): Country =
    countryCreated?.buildEntity(__innerContext, __innerProjection)!!
