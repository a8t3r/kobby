@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeContext
import io.github.ermadmi78.kobby.testcases.escape.kobby.kotlin.EscapeDSL
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Escape : IEscape {
  public val `if`: Long

  override val `is`: String

  override val `for`: Int?

  override val points: List<Point>

  public val it: String

  public val `in`: String?

  public val `val`: Point?

  public val `var`: List<Point?>?

  public val `while`: List<Point>

  override fun __context(): EscapeContext

  public fun EscapeProjection.__withCurrentProjection()
}

@EscapeDSL
public interface EscapeProjection : IEscapeProjection {
  override fun `is`()

  /**
   * @param do Default: 0
   * @param by Default: 100
   */
  override fun points(
    `do`: Int?,
    `by`: Int?,
    __projection: PointProjection.() -> Unit,
  )

  public fun it()

  public fun __withoutIn()

  public fun `val`(__projection: PointProjection.() -> Unit)

  public fun `var`(__projection: PointProjection.() -> Unit)

  public fun `while`(__projection: PointProjection.() -> Unit)

  override fun __minimize() {
    __withoutIn()
  }
}
