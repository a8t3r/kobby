@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List

@JsonTypeName(value = "MyQuery")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = MyQueryDto::class,
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class MyQueryDto @JsonCreator constructor(
  public val find: List<MyResultDto>? = null,
)

public fun MyQueryDto.toBuilder(): MyQueryDtoBuilder = MyQueryDtoBuilder().also {
  it.find = this.find
}

public fun MyQueryDtoBuilder.toDto(): MyQueryDto = MyQueryDto(
  find
)

public fun MyQueryDto(block: MyQueryDtoBuilder.() -> Unit): MyQueryDto =
    MyQueryDtoBuilder().apply(block).toDto()

public fun MyQueryDto.copy(block: MyQueryDtoBuilder.() -> Unit): MyQueryDto =
    toBuilder().apply(block).toDto()

@GraphqlDSL
public class MyQueryDtoBuilder {
  public var find: List<MyResultDto>? = null
}
