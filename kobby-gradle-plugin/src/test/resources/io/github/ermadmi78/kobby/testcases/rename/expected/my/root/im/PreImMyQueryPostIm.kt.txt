@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.im

import kotlin.Any
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import my.root.ctx.PrefCtxContextPostCtx
import my.root.dto1.DPrefMyQueryDPost
import my.root.dto1.EPrefGenderEPost
import my.root.dto1.EPrefGenreEPost
import my.root.en.PrePrActorPostPr
import my.root.en.PrePrCountryPostPr
import my.root.en.PrePrFilmPostPr
import my.root.en.PrePrMyQueryPostPr
import my.root.en.PreQrMyQueryActorsPostQr
import my.root.en.PreQrMyQueryFilmsPostQr
import my.root.en.PreSelMyQueryActorsPostSel
import my.root.en.PreSelMyQueryFilmsPostSel
import my.root.en.PrefEnActorPostEn
import my.root.en.PrefEnCountryPostEn
import my.root.en.PrefEnFilmPostEn
import my.root.en.PrefEnMyQueryPostEn

public class PreImMyQueryPostIm(
  public val innerContextPin: PrefCtxContextPostCtx,
  public val innerProjectionPin: PreImPrePrMyQueryPostPrPostIm,
  public val innerDtoPin: DPrefMyQueryDPost,
) : PrefEnMyQueryPostEn {
  override val country: PrefEnCountryPostEn? by lazy {
    if (innerProjectionPin.innerCountry0Pin == null) {
      error("Property [country] is not available - add [withPrCountryWithPo] projection to switch on it")
    }
    innerDtoPin.resolveCountry(innerContextPin, innerProjectionPin.innerCountry0Pin!!)
  }

  override val countries: List<PrefEnCountryPostEn> by lazy {
    if (innerProjectionPin.innerCountries1Pin == null) {
      error("Property [countries] is not available - add [withPrCountriesWithPo] projection to switch on it")
    }
    innerDtoPin.resolveCountries(innerContextPin, innerProjectionPin.innerCountries1Pin!!)
  }

  override val film: PrefEnFilmPostEn? by lazy {
    if (innerProjectionPin.innerFilm2Pin == null) {
      error("Property [film] is not available - add [withPrFilmWithPo] projection to switch on it")
    }
    innerDtoPin.resolveFilm(innerContextPin, innerProjectionPin.innerFilm2Pin!!)
  }

  override val films: List<PrefEnFilmPostEn> by lazy {
    if (innerProjectionPin.innerFilms3Pin == null) {
      error("Property [films] is not available - add [withPrFilmsWithPo] projection to switch on it")
    }
    innerDtoPin.resolveFilms(innerContextPin, innerProjectionPin.innerFilms3Pin!!)
  }

  override val actor: PrefEnActorPostEn? by lazy {
    if (innerProjectionPin.innerActor4Pin == null) {
      error("Property [actor] is not available - add [withPrActorWithPo] projection to switch on it")
    }
    innerDtoPin.resolveActor(innerContextPin, innerProjectionPin.innerActor4Pin!!)
  }

  override val actors: List<PrefEnActorPostEn> by lazy {
    if (innerProjectionPin.innerActors5Pin == null) {
      error("Property [actors] is not available - add [withPrActorsWithPo] projection to switch on it")
    }
    innerDtoPin.resolveActors(innerContextPin, innerProjectionPin.innerActors5Pin!!)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("MyQuery").append('(')

    var counter = 0

    if (innerProjectionPin.innerCountry0Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("country").append('=').append(country)
    }

    if (innerProjectionPin.innerCountries1Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countries").append('=').append(countries)
    }

    if (innerProjectionPin.innerFilm2Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("film").append('=').append(film)
    }

    if (innerProjectionPin.innerFilms3Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("films").append('=').append(films)
    }

    if (innerProjectionPin.innerActor4Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actor").append('=').append(actor)
    }

    if (innerProjectionPin.innerActors5Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    append(')')
  }

  override fun context(): PrefCtxContextPostCtx = innerContextPin

  override fun PrePrMyQueryPostPr.withCurrentProjection() {
    innerProjectionPin._innerRepeatProjectionPin(setOf(), this)
  }
}

public open class PreImPrePrMyQueryPostPrPostIm : PrePrMyQueryPostPr {
  public var innerCountry0Pin: PreImPrePrCountryPostPrPostIm? = null

  public var innerCountry0IdPin: Long? = null

  public var innerCountries1Pin: PreImPrePrCountryPostPrPostIm? = null

  public var innerCountries1NamePin: String? = null

  public var innerCountries1LimitPin: Int? = null

  public var innerFilm2Pin: PreImPrePrFilmPostPrPostIm? = null

  public var innerFilm2IdPin: Long? = null

  public var innerFilms3Pin: PreImPreQrMyQueryFilmsPostQrPostIm? = null

  public var innerActor4Pin: PreImPrePrActorPostPrPostIm? = null

  public var innerActor4IdPin: Long? = null

  public var innerActors5Pin: PreImPreQrMyQueryActorsPostQrPostIm? = null

  override fun withPrCountryWithPo(id: Long, projection: PrePrCountryPostPr.() -> Unit) {
    innerCountry0Pin = PreImPrePrCountryPostPrPostIm().apply(projection)
    innerCountry0IdPin = id
  }

  override fun withPrCountriesWithPo(
    name: String?,
    limit: Int?,
    projection: PrePrCountryPostPr.() -> Unit,
  ) {
    innerCountries1Pin = PreImPrePrCountryPostPrPostIm().apply(projection)
    innerCountries1NamePin = name
    innerCountries1LimitPin = limit
  }

  override fun withPrFilmWithPo(id: Long, projection: PrePrFilmPostPr.() -> Unit) {
    innerFilm2Pin = PreImPrePrFilmPostPrPostIm().apply(projection)
    innerFilm2IdPin = id
  }

  override fun withPrFilmsWithPo(query: PreQrMyQueryFilmsPostQr.() -> Unit) {
    innerFilms3Pin = PreImPreQrMyQueryFilmsPostQrPostIm().apply(query)
  }

  override fun withPrActorWithPo(id: Long, projection: PrePrActorPostPr.() -> Unit) {
    innerActor4Pin = PreImPrePrActorPostPrPostIm().apply(projection)
    innerActor4IdPin = id
  }

  override fun withPrActorsWithPo(query: PreQrMyQueryActorsPostQr.() -> Unit) {
    innerActors5Pin = PreImPreQrMyQueryActorsPostQrPostIm().apply(query)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatProjectionPin(ignore: Set<String>, projection: PrePrMyQueryPostPr) {
    if ("country" !in ignore && innerCountry0Pin != null) {
      projection.withPrCountryWithPo(innerCountry0IdPin!!) {
        this@PreImPrePrMyQueryPostPrPostIm.innerCountry0Pin!!._innerRepeatProjectionPin(setOf(), this)
      }
    }
    if ("countries" !in ignore && innerCountries1Pin != null) {
      projection.withPrCountriesWithPo(innerCountries1NamePin, innerCountries1LimitPin) {
        this@PreImPrePrMyQueryPostPrPostIm.innerCountries1Pin!!._innerRepeatProjectionPin(setOf(), this)
      }
    }
    if ("film" !in ignore && innerFilm2Pin != null) {
      projection.withPrFilmWithPo(innerFilm2IdPin!!) {
        this@PreImPrePrMyQueryPostPrPostIm.innerFilm2Pin!!._innerRepeatProjectionPin(setOf(), this)
      }
    }
    if ("films" !in ignore && innerFilms3Pin != null) {
      projection.withPrFilmsWithPo {
        this@PreImPrePrMyQueryPostPrPostIm.innerFilms3Pin!!._innerRepeatProjectionPin(setOf(), this)
        this@PreImPrePrMyQueryPostPrPostIm.innerFilms3Pin!!._innerRepeatSelectionPin(this)
      }
    }
    if ("actor" !in ignore && innerActor4Pin != null) {
      projection.withPrActorWithPo(innerActor4IdPin!!) {
        this@PreImPrePrMyQueryPostPrPostIm.innerActor4Pin!!._innerRepeatProjectionPin(setOf(), this)
      }
    }
    if ("actors" !in ignore && innerActors5Pin != null) {
      projection.withPrActorsWithPo {
        this@PreImPrePrMyQueryPostPrPostIm.innerActors5Pin!!._innerRepeatProjectionPin(setOf(), this)
        this@PreImPrePrMyQueryPostPrPostIm.innerActors5Pin!!._innerRepeatSelectionPin(this)
      }
    }
  }

  /**
   * Projection for field: country
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildCountry0Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("country" !in ignore && innerCountry0Pin != null) {
      body.append(' ').append("country")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: country.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerCountry0IdPin!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      innerCountry0Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: countries
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildCountries1Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("countries" !in ignore && innerCountries1Pin != null) {
      body.append(' ').append("countries")
      var counter = 0
      val addBrackets = innerCountries1NamePin != null || innerCountries1LimitPin != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: countries.name
      if (innerCountries1NamePin != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerCountries1NamePin!!
        body.append("name").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: countries.limit
      if (innerCountries1LimitPin != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerCountries1LimitPin!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      innerCountries1Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: film
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildFilm2Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("film" !in ignore && innerFilm2Pin != null) {
      body.append(' ').append("film")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: film.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFilm2IdPin!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      innerFilm2Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: films
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildFilms3Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("films" !in ignore && innerFilms3Pin != null) {
      body.append(' ').append("films")
      var counter = 0
      val addBrackets = innerFilms3Pin!!.title != null || innerFilms3Pin!!.genre != null ||
          innerFilms3Pin!!.limit != null || innerFilms3Pin!!.offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: films.title
      if (innerFilms3Pin!!.title != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFilms3Pin!!.title!!
        body.append("title").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: films.genre
      if (innerFilms3Pin!!.genre != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFilms3Pin!!.genre!!
        body.append("genre").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Genre")
      }

      // Argument: films.limit
      if (innerFilms3Pin!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFilms3Pin!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: films.offset
      if (innerFilms3Pin!!.offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFilms3Pin!!.offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Film
      innerFilms3Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actor
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildActor4Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actor" !in ignore && innerActor4Pin != null) {
      body.append(' ').append("actor")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actor.id
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActor4IdPin!!
        body.append("id").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      innerActor4Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildActors5Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actors" !in ignore && innerActors5Pin != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = innerActors5Pin!!.firstName != null || innerActors5Pin!!.lastName != null ||
          innerActors5Pin!!.gender != null || innerActors5Pin!!.limit != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (innerActors5Pin!!.firstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors5Pin!!.firstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.lastName
      if (innerActors5Pin!!.lastName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors5Pin!!.lastName!!
        body.append("lastName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.gender
      if (innerActors5Pin!!.gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors5Pin!!.gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (innerActors5Pin!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors5Pin!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      innerActors5Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerBuildPin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: country
    __innerBuildCountry0Pin(ignore, header, body, arguments)

    // Field: countries
    __innerBuildCountries1Pin(ignore, header, body, arguments)

    // Field: film
    __innerBuildFilm2Pin(ignore, header, body, arguments)

    // Field: films
    __innerBuildFilms3Pin(ignore, header, body, arguments)

    // Field: actor
    __innerBuildActor4Pin(ignore, header, body, arguments)

    // Field: actors
    __innerBuildActors5Pin(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

public class PreImPreQrMyQueryFilmsPostQrPostIm : PreImPrePrFilmPostPrPostIm(),
    PreQrMyQueryFilmsPostQr {
  override var title: String? = null

  override var genre: EPrefGenreEPost? = null

  override var limit: Int? = null

  override var offset: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatSelectionPin(selection: PreSelMyQueryFilmsPostSel) {
    selection.title = title
    selection.genre = genre
    selection.limit = limit
    selection.offset = offset
  }
}

public class PreImPreQrMyQueryActorsPostQrPostIm : PreImPrePrActorPostPrPostIm(),
    PreQrMyQueryActorsPostQr {
  override var firstName: String? = null

  override var lastName: String? = null

  override var gender: EPrefGenderEPost? = null

  override var limit: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatSelectionPin(selection: PreSelMyQueryActorsPostSel) {
    selection.firstName = firstName
    selection.lastName = lastName
    selection.gender = gender
    selection.limit = limit
  }
}

public fun DPrefMyQueryDPost.buildEntity(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrMyQueryPostPrPostIm): PrefEnMyQueryPostEn =
    PreImMyQueryPostIm(innerContextPin, innerProjectionPin, this)

public fun DPrefMyQueryDPost.resolveCountry(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrCountryPostPrPostIm): PrefEnCountryPostEn? =
    country?.buildEntity(innerContextPin, innerProjectionPin)

public fun DPrefMyQueryDPost.resolveCountries(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrCountryPostPrPostIm): List<PrefEnCountryPostEn> =
    countries?.map { it.buildEntity(innerContextPin, innerProjectionPin) } ?: listOf()

public fun DPrefMyQueryDPost.resolveFilm(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrFilmPostPrPostIm): PrefEnFilmPostEn? =
    film?.buildEntity(innerContextPin, innerProjectionPin)

public fun DPrefMyQueryDPost.resolveFilms(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrFilmPostPrPostIm): List<PrefEnFilmPostEn> =
    films?.map { it.buildEntity(innerContextPin, innerProjectionPin) } ?: listOf()

public fun DPrefMyQueryDPost.resolveActor(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrActorPostPrPostIm): PrefEnActorPostEn? =
    actor?.buildEntity(innerContextPin, innerProjectionPin)

public fun DPrefMyQueryDPost.resolveActors(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrActorPostPrPostIm): List<PrefEnActorPostEn> =
    actors?.map { it.buildEntity(innerContextPin, innerProjectionPin) } ?: listOf()
