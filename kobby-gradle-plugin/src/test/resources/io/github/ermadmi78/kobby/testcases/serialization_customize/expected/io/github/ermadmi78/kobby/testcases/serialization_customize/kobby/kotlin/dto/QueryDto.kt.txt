@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.serialization_customize.kobby.kotlin.SimpleDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

@Serializable
@SerialName("Query")
public data class QueryDto(
  public val simple: List<SimpleDto>? = null,
)

public fun QueryDto.toBuilder(): QueryDtoBuilder = QueryDtoBuilder().also {
  it.simple = this.simple
}

public fun QueryDtoBuilder.toDto(): QueryDto = QueryDto(
  simple
)

public fun QueryDto(block: QueryDtoBuilder.() -> Unit): QueryDto =
    QueryDtoBuilder().apply(block).toDto()

public fun QueryDto.copy(block: QueryDtoBuilder.() -> Unit): QueryDto =
    toBuilder().apply(block).toDto()

@SimpleDSL
public class QueryDtoBuilder {
  public var simple: List<SimpleDto>? = null
}
