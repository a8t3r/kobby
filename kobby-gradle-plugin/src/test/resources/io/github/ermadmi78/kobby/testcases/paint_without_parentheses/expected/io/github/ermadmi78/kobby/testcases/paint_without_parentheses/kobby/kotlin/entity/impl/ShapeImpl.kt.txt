@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.PaintContext
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.CircleDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.RectangleDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.ShapeDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.dto.SquareDto
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.CircleProjection
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.RectangleProjection
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.Shape
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.ShapeQualifiedProjection
import io.github.ermadmi78.kobby.testcases.paint_without_parentheses.kobby.kotlin.entity.SquareProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.MutableSet
import kotlin.collections.Set
import kotlin.collections.mutableSetOf
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder

internal open class ShapeQualifiedProjectionImpl : ShapeQualifiedProjection {
  internal val ___innerIgnore: MutableSet<String> = mutableSetOf()

  internal var __innerId0: Boolean = false

  override val id: Any?
    get() {
      __innerId0 = true
      return null
    }

  internal var __innerOpaque1: Boolean = false

  override val opaque: Any?
    get() {
      __innerOpaque1 = true
      return null
    }

  internal val ___inner__onCircle: CircleProjectionImpl = CircleProjectionImpl()

  internal val ___inner__onSquare: SquareProjectionImpl = SquareProjectionImpl()

  internal val ___inner__onRectangle: RectangleProjectionImpl = RectangleProjectionImpl()

  override fun __onCircle(__projection: CircleProjection.() -> Unit) {
    CircleProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onCircle)
  }

  override fun __onSquare(__projection: SquareProjection.() -> Unit) {
    SquareProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onSquare)
  }

  override fun __onRectangle(__projection: RectangleProjection.() -> Unit) {
    RectangleProjectionImpl().apply(__projection).___innerRepeatProjection(___innerIgnore, ___inner__onRectangle)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>,
      __projection: ShapeQualifiedProjection) {
    if ("id" !in ignore && __innerId0) {
      __projection.id
    }
    if ("opaque" !in ignore && __innerOpaque1) {
      __projection.opaque
    }
    __projection.__onCircle {
      this@ShapeQualifiedProjectionImpl.___inner__onCircle.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onSquare {
      this@ShapeQualifiedProjectionImpl.___inner__onSquare.___innerRepeatProjection(setOf(), this)
    }
    __projection.__onRectangle {
      this@ShapeQualifiedProjectionImpl.___inner__onRectangle.___innerRepeatProjection(setOf(), this)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore && __innerId0) {
      body.append(' ').append("id")
    }

    // Field: opaque
    if ("opaque" !in ignore && __innerOpaque1) {
      body.append(' ').append("opaque")
    }

    body.append(' ').append("__typename")

    val subBody = StringBuilder()

    // Qualification of: Circle
    subBody.clear()
    ___inner__onCircle.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Circle").append(subBody)
    }

    // Qualification of: Square
    subBody.clear()
    ___inner__onSquare.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Square").append(subBody)
    }

    // Qualification of: Rectangle
    subBody.clear()
    ___inner__onRectangle.___innerBuild(___innerIgnore, header, subBody, arguments)
    if (subBody.length > 4) {
      body.append(" ... on ").append("Rectangle").append(subBody)
    }

    body.append(' ').append('}')
  }
}

internal fun ShapeDto.buildEntity(__innerContext: PaintContext,
    __innerProjection: ShapeQualifiedProjectionImpl): Shape = when(this) {
  is CircleDto -> CircleImpl(__innerContext, __innerProjection.___inner__onCircle, this)
  is SquareDto -> SquareImpl(__innerContext, __innerProjection.___inner__onSquare, this)
  is RectangleDto -> RectangleImpl(__innerContext, __innerProjection.___inner__onRectangle, this)
  else -> error("""Invalid algorithm - unexpected dto type: ${this::class.simpleName}""")
}
