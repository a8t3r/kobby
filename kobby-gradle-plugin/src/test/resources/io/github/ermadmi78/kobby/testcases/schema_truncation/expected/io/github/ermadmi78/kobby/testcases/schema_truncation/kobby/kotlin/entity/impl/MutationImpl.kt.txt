@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.`impl`

import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.cinemaJson
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.Country
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.CountryProjection
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.schema_truncation.kobby.kotlin.entity.MutationProjection
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.json.encodeToJsonElement

internal class MutationImpl(
  internal val __innerContext: CinemaContext,
  internal val __innerProjection: MutationProjectionImpl,
  internal val __innerDto: MutationDto,
) : Mutation {
  override val createCountry: Country by lazy {
    if (__innerProjection.__innerCreateCountry0 == null) {
      error("Property [createCountry] is not available - add [createCountry] projection to switch on it")
    }
    __innerDto.resolveCreateCountry(__innerContext, __innerProjection.__innerCreateCountry0!!)
  }

  override val associate: Boolean
    get() {
      if (!__innerProjection.__innerAssociate1) {
        error("Property [associate] is not available - add [associate] projection to switch on it")
      }
      return __innerDto.associate!!
    }

  override val tagFilm: Boolean
    get() {
      if (!__innerProjection.__innerTagFilm2) {
        error("Property [tagFilm] is not available - add [tagFilm] projection to switch on it")
      }
      return __innerDto.tagFilm!!
    }

  override val tagActor: Boolean
    get() {
      if (!__innerProjection.__innerTagActor3) {
        error("Property [tagActor] is not available - add [tagActor] projection to switch on it")
      }
      return __innerDto.tagActor!!
    }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Mutation").append('(')

    var counter = 0

    if (__innerProjection.__innerCreateCountry0 != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("createCountry").append('=').append(createCountry)
    }

    if (__innerProjection.__innerAssociate1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("associate").append('=').append(associate)
    }

    if (__innerProjection.__innerTagFilm2) {
      if (counter++ > 0) {
        append(", ")
      }
      append("tagFilm").append('=').append(tagFilm)
    }

    if (__innerProjection.__innerTagActor3) {
      if (counter++ > 0) {
        append(", ")
      }
      append("tagActor").append('=').append(tagActor)
    }

    append(')')
  }

  override fun __context(): CinemaContext = __innerContext

  override fun MutationProjection.__withCurrentProjection() {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MutationProjectionImpl : MutationProjection {
  internal var __innerCreateCountry0: CountryProjectionImpl? = null

  internal var __innerCreateCountry0Name: String? = null

  internal var __innerAssociate1: Boolean = false

  internal var __innerAssociate1FilmId: Long? = null

  internal var __innerAssociate1ActorId: Long? = null

  internal var __innerTagFilm2: Boolean = false

  internal var __innerTagFilm2FilmId: Long? = null

  internal var __innerTagFilm2TagValue: String? = null

  internal var __innerTagActor3: Boolean = false

  internal var __innerTagActor3ActorId: Long? = null

  internal var __innerTagActor3TagValue: String? = null

  override fun createCountry(name: String, __projection: CountryProjection.() -> Unit) {
    __innerCreateCountry0 = CountryProjectionImpl().apply(__projection)
    __innerCreateCountry0Name = name
  }

  override fun associate(filmId: Long, actorId: Long) {
    __innerAssociate1 = true
    __innerAssociate1FilmId = filmId
    __innerAssociate1ActorId = actorId
  }

  override fun tagFilm(filmId: Long, tagValue: String) {
    __innerTagFilm2 = true
    __innerTagFilm2FilmId = filmId
    __innerTagFilm2TagValue = tagValue
  }

  override fun tagActor(actorId: Long, tagValue: String) {
    __innerTagActor3 = true
    __innerTagActor3ActorId = actorId
    __innerTagActor3TagValue = tagValue
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: MutationProjection) {
    if ("createCountry" !in ignore && __innerCreateCountry0 != null) {
      __projection.createCountry(__innerCreateCountry0Name!!) {
        this@MutationProjectionImpl.__innerCreateCountry0!!.___innerRepeatProjection(setOf(), this)
      }
    }
    if ("associate" !in ignore && __innerAssociate1) {
      __projection.associate(__innerAssociate1FilmId!!, __innerAssociate1ActorId!!)
    }
    if ("tagFilm" !in ignore && __innerTagFilm2) {
      __projection.tagFilm(__innerTagFilm2FilmId!!, __innerTagFilm2TagValue!!)
    }
    if ("tagActor" !in ignore && __innerTagActor3) {
      __projection.tagActor(__innerTagActor3ActorId!!, __innerTagActor3TagValue!!)
    }
  }

  /**
   * Projection for field: createCountry
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildCreateCountry0(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("createCountry" !in ignore && __innerCreateCountry0 != null) {
      body.append(' ').append("createCountry")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: createCountry.name
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerCreateCountry0Name!!)
        body.append("name").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Country
      __innerCreateCountry0!!.___innerBuild(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection for field: associate
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildAssociate1(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("associate" !in ignore && __innerAssociate1) {
      body.append(' ').append("associate")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: associate.filmId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerAssociate1FilmId!!)
        body.append("filmId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      // Argument: associate.actorId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerAssociate1ActorId!!)
        body.append("actorId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: tagFilm
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildTagFilm2(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("tagFilm" !in ignore && __innerTagFilm2) {
      body.append(' ').append("tagFilm")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: tagFilm.filmId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerTagFilm2FilmId!!)
        body.append("filmId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      // Argument: tagFilm.tagValue
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerTagFilm2TagValue!!)
        body.append("tagValue").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: tagActor
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun ____innerBuildTagActor3(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    if ("tagActor" !in ignore && __innerTagActor3) {
      body.append(' ').append("tagActor")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: tagActor.actorId
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerTagActor3ActorId!!)
        body.append("actorId").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("ID!")
      }

      // Argument: tagActor.tagValue
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = cinemaJson.encodeToJsonElement(__innerTagActor3TagValue!!)
        body.append("tagValue").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String!")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  internal fun ___innerBuild(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, JsonElement>,
  ) {
    body.append(' ').append('{')

    // Field: createCountry
    ____innerBuildCreateCountry0(ignore, header, body, arguments)

    // Field: associate
    ____innerBuildAssociate1(ignore, header, body, arguments)

    // Field: tagFilm
    ____innerBuildTagFilm2(ignore, header, body, arguments)

    // Field: tagActor
    ____innerBuildTagActor3(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

internal fun MutationDto.buildEntity(__innerContext: CinemaContext,
    __innerProjection: MutationProjectionImpl): Mutation =
    MutationImpl(__innerContext, __innerProjection, this)

internal fun MutationDto.resolveCreateCountry(__innerContext: CinemaContext,
    __innerProjection: CountryProjectionImpl): Country =
    createCountry?.buildEntity(__innerContext, __innerProjection)!!
