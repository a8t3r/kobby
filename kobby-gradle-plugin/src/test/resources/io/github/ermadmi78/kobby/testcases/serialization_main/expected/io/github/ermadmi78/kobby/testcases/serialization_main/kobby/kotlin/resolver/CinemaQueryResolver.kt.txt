@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.resolver

import graphql.kickstart.tools.GraphQLQueryResolver
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.ActorDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.Genre
import io.github.ermadmi78.kobby.testcases.serialization_main.kobby.kotlin.dto.TaggableDto
import java.time.LocalDate
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public interface CinemaQueryResolver : GraphQLQueryResolver {
  /**
   * Find country by id.
   * Returns null if not found.
   */
  public suspend fun country(id: Long): CountryDto?

  /**
   * Find countries by name.
   * Returns empty list if not found.
   *
   * @param name Part of name of country to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited.
   * @param offset Offset of result list.
   */
  public suspend fun countries(
    name: String?,
    limit: Int,
    offset: Int,
  ): List<CountryDto>

  /**
   * Find film by id.
   * Returns null if not found.
   */
  public suspend fun film(id: Long): FilmDto?

  /**
   * Find films by title and genre.
   * Returns empty list if not found.
   *
   * @param title Part of title of film to search
   * @param genre Genre of film to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited.
   * @param offset Offset of result list.
   */
  public suspend fun films(
    title: String?,
    genre: Genre?,
    limit: Int,
    offset: Int,
  ): List<FilmDto>

  /**
   * Find actor by id.
   * Returns null if not found.
   */
  public suspend fun actor(id: Long): ActorDto?

  /**
   * Find actors by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   *
   * @param firstName Part of first name of actor to search
   * @param lastName Part of last name of actor to search
   * @param birthdayFrom Find actors whose birthday is greater than or equal to birthdayFrom
   * @param birthdayTo Find actors whose birthday is less than or equal to birthdayTo
   * @param gender Gender of actor to search
   * @param limit Limit of result list.
   * Put -1 to be unlimited.
   * @param offset Offset of result list.
   */
  public suspend fun actors(
    firstName: String?,
    lastName: String?,
    birthdayFrom: LocalDate?,
    birthdayTo: LocalDate?,
    gender: Gender?,
    limit: Int,
    offset: Int,
  ): List<ActorDto>

  /**
   * Find entities by tag
   */
  public suspend fun taggable(tag: String): List<TaggableDto>
}
