@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.disable_jackson.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.disable_jackson.kobby.kotlin.CountryDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply

public data class MutationDto(
  public val createCountry: CountryDto? = null,
)

public fun MutationDto.toBuilder(): MutationDtoBuilder = MutationDtoBuilder().also {
  it.createCountry = this.createCountry
}

public fun MutationDtoBuilder.toDto(): MutationDto = MutationDto(
  createCountry
)

public fun MutationDto(block: MutationDtoBuilder.() -> Unit): MutationDto =
    MutationDtoBuilder().apply(block).toDto()

public fun MutationDto.copy(block: MutationDtoBuilder.() -> Unit): MutationDto =
    toBuilder().apply(block).toDto()

@CountryDSL
public class MutationDtoBuilder {
  public var createCountry: CountryDto? = null
}
