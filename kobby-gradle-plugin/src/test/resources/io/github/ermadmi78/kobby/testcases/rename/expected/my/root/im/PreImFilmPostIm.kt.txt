@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package my.root.im

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.listOf
import kotlin.collections.map
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString
import kotlin.text.isNotEmpty
import my.root.ctx.PrefCtxContextPostCtx
import my.root.dto1.DPrefFilmDPost
import my.root.dto1.EPrefGenderEPost
import my.root.dto1.EPrefGenreEPost
import my.root.en.PrePrCountryPostPr
import my.root.en.PrePrFilmPostPr
import my.root.en.PreQrFilmActorsPostQr
import my.root.en.PreSelEntityFieldsPostSel
import my.root.en.PreSelFilmActorsPostSel
import my.root.en.PrefEnActorPostEn
import my.root.en.PrefEnCountryPostEn
import my.root.en.PrefEnFilmPostEn

public class PreImFilmPostIm(
  public val innerContextPin: PrefCtxContextPostCtx,
  public val innerProjectionPin: PreImPrePrFilmPostPrPostIm,
  public val innerDtoPin: DPrefFilmDPost,
) : PrefEnFilmPostEn {
  override val id: Long
    get() = innerDtoPin.id!!

  override val fields: String
    get() {
      if (innerProjectionPin.innerFields1Pin == null) {
        error("Property [fields] is not available - add [withPrFieldsWithPo] projection to switch on it")
      }
      return innerDtoPin.fields!!
    }

  override val title: String
    get() {
      if (!innerProjectionPin.innerTitle2Pin) {
        error("Property [title] is not available - remove [withoutPrTitleWithoutPo] projection to switch on it")
      }
      return innerDtoPin.title!!
    }

  override val genre: EPrefGenreEPost
    get() {
      if (!innerProjectionPin.innerGenre3Pin) {
        error("Property [genre] is not available - add [withPrGenreWithPo] projection to switch on it")
      }
      return innerDtoPin.genre!!
    }

  override val countryId: Long
    get() = innerDtoPin.countryId!!

  override val country: PrefEnCountryPostEn by lazy {
    if (innerProjectionPin.innerCountry5Pin == null) {
      error("Property [country] is not available - add [withPrCountryWithPo] projection to switch on it")
    }
    innerDtoPin.resolveCountry(innerContextPin, innerProjectionPin.innerCountry5Pin!!)
  }

  override val actors: List<PrefEnActorPostEn> by lazy {
    if (innerProjectionPin.innerActors6Pin == null) {
      error("Property [actors] is not available - add [withPrActorsWithPo] projection to switch on it")
    }
    innerDtoPin.resolveActors(innerContextPin, innerProjectionPin.innerActors6Pin!!)
  }

  override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as PreImFilmPostIm
    return innerDtoPin.id == other.innerDtoPin.id
  }

  override fun hashCode(): Int = innerDtoPin.id?.hashCode() ?: 0

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  override fun toString(): String = buildString {
    append("Film").append('(')

    var counter = 0

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (innerProjectionPin.innerFields1Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("fields").append('=').append(fields)
    }

    if (innerProjectionPin.innerTitle2Pin) {
      if (counter++ > 0) {
        append(", ")
      }
      append("title").append('=').append(title)
    }

    if (innerProjectionPin.innerGenre3Pin) {
      if (counter++ > 0) {
        append(", ")
      }
      append("genre").append('=').append(genre)
    }

    if (true) {
      if (counter++ > 0) {
        append(", ")
      }
      append("countryId").append('=').append(countryId)
    }

    if (innerProjectionPin.innerCountry5Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("country").append('=').append(country)
    }

    if (innerProjectionPin.innerActors6Pin != null) {
      if (counter++ > 0) {
        append(", ")
      }
      append("actors").append('=').append(actors)
    }

    append(')')
  }

  override fun context(): PrefCtxContextPostCtx = innerContextPin

  override fun PrePrFilmPostPr.withCurrentProjection() {
    innerProjectionPin._innerRepeatProjectionPin(setOf(), this)
  }
}

public open class PreImPrePrFilmPostPrPostIm : PrePrFilmPostPr {
  public var innerFields1Pin: PreImPreSelEntityFieldsPostSelPostIm? = null

  public var innerTitle2Pin: Boolean = true

  public var innerGenre3Pin: Boolean = false

  public var innerCountry5Pin: PreImPrePrCountryPostPrPostIm? = null

  public var innerActors6Pin: PreImPreQrFilmActorsPostQrPostIm? = null

  override fun withPrFieldsWithPo(selection: PreSelEntityFieldsPostSel.() -> Unit) {
    innerFields1Pin = PreImPreSelEntityFieldsPostSelPostIm().apply(selection)
  }

  override fun withoutPrTitleWithoutPo() {
    innerTitle2Pin = false
  }

  override fun withPrGenreWithPo() {
    innerGenre3Pin = true
  }

  override fun withPrCountryWithPo(projection: PrePrCountryPostPr.() -> Unit) {
    innerCountry5Pin = PreImPrePrCountryPostPrPostIm().apply(projection)
  }

  override fun withPrActorsWithPo(query: PreQrFilmActorsPostQr.() -> Unit) {
    innerActors6Pin = PreImPreQrFilmActorsPostQrPostIm().apply(query)
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatProjectionPin(ignore: Set<String>, projection: PrePrFilmPostPr) {
    if ("fields" !in ignore && innerFields1Pin != null) {
      projection.withPrFieldsWithPo {
        this@PreImPrePrFilmPostPrPostIm.innerFields1Pin!!._innerRepeatSelectionPin(this)
      }
    }
    if ("title" !in ignore && !innerTitle2Pin) {
      projection.withoutPrTitleWithoutPo()
    }
    if ("genre" !in ignore && innerGenre3Pin) {
      projection.withPrGenreWithPo()
    }
    if ("country" !in ignore && innerCountry5Pin != null) {
      projection.withPrCountryWithPo {
        this@PreImPrePrFilmPostPrPostIm.innerCountry5Pin!!._innerRepeatProjectionPin(setOf(), this)
      }
    }
    if ("actors" !in ignore && innerActors6Pin != null) {
      projection.withPrActorsWithPo {
        this@PreImPrePrFilmPostPrPostIm.innerActors6Pin!!._innerRepeatProjectionPin(setOf(), this)
        this@PreImPrePrFilmPostPrPostIm.innerActors6Pin!!._innerRepeatSelectionPin(this)
      }
    }
  }

  /**
   * Projection for field: fields
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildFields1Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("fields" !in ignore && innerFields1Pin != null) {
      body.append(' ').append("fields")
      var counter = 0
      val addBrackets = innerFields1Pin!!.keys != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: fields.keys
      if (innerFields1Pin!!.keys != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerFields1Pin!!.keys!!
        body.append("keys").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("[String!]")
      }

      if (addBrackets) {
        body.append(')')
      }
    }
  }

  /**
   * Projection for field: actors
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  private fun __innerBuildActors6Pin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    if ("actors" !in ignore && innerActors6Pin != null) {
      body.append(' ').append("actors")
      var counter = 0
      val addBrackets = innerActors6Pin!!.firstName != null || innerActors6Pin!!.lastName != null ||
          innerActors6Pin!!.gender != null || innerActors6Pin!!.limit != null ||
          innerActors6Pin!!.offset != null
      if (addBrackets) {
        body.append('(')
      }

      // Argument: actors.firstName
      if (innerActors6Pin!!.firstName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors6Pin!!.firstName!!
        body.append("firstName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.lastName
      if (innerActors6Pin!!.lastName != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors6Pin!!.lastName!!
        body.append("lastName").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("String")
      }

      // Argument: actors.gender
      if (innerActors6Pin!!.gender != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors6Pin!!.gender!!
        body.append("gender").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Gender")
      }

      // Argument: actors.limit
      if (innerActors6Pin!!.limit != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors6Pin!!.limit!!
        body.append("limit").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      // Argument: actors.offset
      if (innerActors6Pin!!.offset != null) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = innerActors6Pin!!.offset!!
        body.append("offset").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("Int!")
      }

      if (addBrackets) {
        body.append(')')
      }

      // Build nested projection of Actor
      innerActors6Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }
  }

  /**
   * Projection builder function
   */
  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerBuildPin(
    ignore: Set<String>,
    `header`: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ) {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore) {
      body.append(' ').append("id")
    }

    // Field: fields
    __innerBuildFields1Pin(ignore, header, body, arguments)

    // Field: title
    if ("title" !in ignore && innerTitle2Pin) {
      body.append(' ').append("title")
    }

    // Field: genre
    if ("genre" !in ignore && innerGenre3Pin) {
      body.append(' ').append("genre")
    }

    // Field: countryId
    if ("countryId" !in ignore) {
      body.append(' ').append("countryId")
    }

    // Field: country
    if ("country" !in ignore && innerCountry5Pin != null) {
      body.append(' ').append("country")

      // Build nested projection of Country
      innerCountry5Pin!!._innerBuildPin(setOf(), header, body, arguments)
    }

    // Field: actors
    __innerBuildActors6Pin(ignore, header, body, arguments)

    body.append(' ').append('}')
  }
}

public class PreImPreQrFilmActorsPostQrPostIm : PreImPrePrActorPostPrPostIm(), PreQrFilmActorsPostQr
    {
  override var firstName: String? = null

  override var lastName: String? = null

  override var gender: EPrefGenderEPost? = null

  override var limit: Int? = null

  override var offset: Int? = null

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE", "KotlinConstantConditions")
  public fun _innerRepeatSelectionPin(selection: PreSelFilmActorsPostSel) {
    selection.firstName = firstName
    selection.lastName = lastName
    selection.gender = gender
    selection.limit = limit
    selection.offset = offset
  }
}

public fun DPrefFilmDPost.buildEntity(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrFilmPostPrPostIm): PrefEnFilmPostEn =
    PreImFilmPostIm(innerContextPin, innerProjectionPin, this)

public fun DPrefFilmDPost.resolveCountry(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrCountryPostPrPostIm): PrefEnCountryPostEn =
    country?.buildEntity(innerContextPin, innerProjectionPin)!!

public fun DPrefFilmDPost.resolveActors(innerContextPin: PrefCtxContextPostCtx,
    innerProjectionPin: PreImPrePrActorPostPrPostIm): List<PrefEnActorPostEn> =
    actors?.map { it.buildEntity(innerContextPin, innerProjectionPin) } ?: listOf()
